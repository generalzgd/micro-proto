// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm/common.proto

package com.proto.comm;

/**
 * <pre>
 * -----------------------------------------
 * </pre>
 *
 * Protobuf enum {@code comm.ErrorType}
 */
public enum ErrorType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>Norm = 0;</code>
   */
  Norm(0),
  /**
   * <code>UnknowErr = 1;</code>
   */
  UnknowErr(1),
  /**
   * <pre>
   * 空指针
   * </pre>
   *
   * <code>NilErr = 2;</code>
   */
  NilErr(2),
  /**
   * <pre>
   * 协议包过大
   * </pre>
   *
   * <code>PackTooLarge = 3;</code>
   */
  PackTooLarge(3),
  /**
   * <pre>
   * 协议版本号错误
   * </pre>
   *
   * <code>PackVerFail = 4;</code>
   */
  PackVerFail(4),
  /**
   * <pre>
   * Cmdid字段错误
   * </pre>
   *
   * <code>CmdidFail = 5;</code>
   */
  CmdidFail(5),
  /**
   * <pre>
   * 序列化失败
   * </pre>
   *
   * <code>SerializeFail = 6;</code>
   */
  SerializeFail(6),
  /**
   * <pre>
   * 反序列化失败
   * </pre>
   *
   * <code>UnserializeFail = 7;</code>
   */
  UnserializeFail(7),
  /**
   * <pre>
   * 加密失败
   * </pre>
   *
   * <code>EncryptFail = 8;</code>
   */
  EncryptFail(8),
  /**
   * <pre>
   * 解密失败
   * </pre>
   *
   * <code>DecryptFail = 9;</code>
   */
  DecryptFail(9),
  /**
   * <pre>
   * 压缩失败
   * </pre>
   *
   * <code>CompressFail = 10;</code>
   */
  CompressFail(10),
  /**
   * <pre>
   * 解压失败
   * </pre>
   *
   * <code>UncompressFail = 11;</code>
   */
  UncompressFail(11),
  /**
   * <pre>
   * 终端异常
   * </pre>
   *
   * <code>EndpointFail = 12;</code>
   */
  EndpointFail(12),
  /**
   * <pre>
   * 用户元信息异常
   * </pre>
   *
   * <code>ClientInfoFail = 13;</code>
   */
  ClientInfoFail(13),
  /**
   * <pre>
   * 网关转发传输失败
   * </pre>
   *
   * <code>TransmitFail = 14;</code>
   */
  TransmitFail(14),
  /**
   * <pre>
   * protobuf/json序列化错误
   * </pre>
   *
   * <code>MarshalFail = 15;</code>
   */
  MarshalFail(15),
  /**
   * <pre>
   *参数错误
   * </pre>
   *
   * <code>ParamErr = 16;</code>
   */
  ParamErr(16),
  /**
   * <pre>
   *重复登录
   * </pre>
   *
   * <code>NewLogin = 17;</code>
   */
  NewLogin(17),
  /**
   * <pre>
   *未登录
   * </pre>
   *
   * <code>NotLogin = 18;</code>
   */
  NotLogin(18),
  /**
   * <pre>
   * 已登录
   * </pre>
   *
   * <code>HasLogin = 19;</code>
   */
  HasLogin(19),
  /**
   * <pre>
   *token校验失败
   * </pre>
   *
   * <code>TokenFail = 20;</code>
   */
  TokenFail(20),
  /**
   * <pre>
   * im登录失败
   * </pre>
   *
   * <code>ImLoginFail = 21;</code>
   */
  ImLoginFail(21),
  /**
   * <pre>
   *用户不存在
   * </pre>
   *
   * <code>UserNoExist = 22;</code>
   */
  UserNoExist(22),
  /**
   * <pre>
   *非法用户
   * </pre>
   *
   * <code>UserIllegal = 23;</code>
   */
  UserIllegal(23),
  /**
   * <pre>
   *连接异常断开
   * </pre>
   *
   * <code>LinkErr = 24;</code>
   */
  LinkErr(24),
  /**
   * <pre>
   * 敏感词
   * </pre>
   *
   * <code>FilterErr = 25;</code>
   */
  FilterErr(25),
  /**
   * <pre>
   * 数据库错误
   * </pre>
   *
   * <code>DBErr = 26;</code>
   */
  DBErr(26),
  /**
   * <pre>
   * 平台禁言
   * </pre>
   *
   * <code>PlatformBlock = 27;</code>
   */
  PlatformBlock(27),
  /**
   * <pre>
   * 对方拒收，包括黑名单，聊天设置中的相关规则
   * </pre>
   *
   * <code>TargetRejection = 28;</code>
   */
  TargetRejection(28),
  /**
   * <pre>
   * 发送频率太高
   * </pre>
   *
   * <code>RateErr = 29;</code>
   */
  RateErr(29),
  /**
   * <pre>
   * 服务器错误，比如崩溃等
   * </pre>
   *
   * <code>SvrErr = 30;</code>
   */
  SvrErr(30),
  /**
   * <pre>
   * sid不存在，校验失败
   * </pre>
   *
   * <code>SidErr = 31;</code>
   */
  SidErr(31),
  /**
   * <pre>
   * grpc链接错误
   * </pre>
   *
   * <code>GrpcConnErr = 32;</code>
   */
  GrpcConnErr(32),
  /**
   * <pre>
   * redis链接错误
   * </pre>
   *
   * <code>RdsConnErr = 33;</code>
   */
  RdsConnErr(33),
  /**
   * <pre>
   * 数据库链接错误
   * </pre>
   *
   * <code>DbConnErr = 34;</code>
   */
  DbConnErr(34),
  /**
   * <pre>
   * 用户信息获取错误
   * </pre>
   *
   * <code>UserGetErr = 35;</code>
   */
  UserGetErr(35),
  /**
   * <pre>
   * 空数据异常,或数据不对
   * </pre>
   *
   * <code>DataErr = 36;</code>
   */
  DataErr(36),
  /**
   * <pre>
   * rpc操作错误
   * </pre>
   *
   * <code>RpcOptErr = 37;</code>
   */
  RpcOptErr(37),
  /**
   * <pre>
   * redis操作错误
   * </pre>
   *
   * <code>RdsOptErr = 38;</code>
   */
  RdsOptErr(38),
  /**
   * <pre>
   * json格式错误
   * </pre>
   *
   * <code>JsonDataErr = 39;</code>
   */
  JsonDataErr(39),
  /**
   * <pre>
   * proto格式错误
   * </pre>
   *
   * <code>ProtoDataErr = 40;</code>
   */
  ProtoDataErr(40),
  /**
   * <pre>
   * 货币不足， 要做特定处理
   * </pre>
   *
   * <code>CurrencyLessErr = 41;</code>
   */
  CurrencyLessErr(41),
  /**
   * <pre>
   * php api访问错误
   * </pre>
   *
   * <code>ApiOptErr = 42;</code>
   */
  ApiOptErr(42),
  /**
   * <pre>
   * 各个业务员服务自定义错误基础值，新定义的值+CustomErr
   * </pre>
   *
   * <code>CustomErr = 1000;</code>
   */
  CustomErr(1000),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>Norm = 0;</code>
   */
  public static final int Norm_VALUE = 0;
  /**
   * <code>UnknowErr = 1;</code>
   */
  public static final int UnknowErr_VALUE = 1;
  /**
   * <pre>
   * 空指针
   * </pre>
   *
   * <code>NilErr = 2;</code>
   */
  public static final int NilErr_VALUE = 2;
  /**
   * <pre>
   * 协议包过大
   * </pre>
   *
   * <code>PackTooLarge = 3;</code>
   */
  public static final int PackTooLarge_VALUE = 3;
  /**
   * <pre>
   * 协议版本号错误
   * </pre>
   *
   * <code>PackVerFail = 4;</code>
   */
  public static final int PackVerFail_VALUE = 4;
  /**
   * <pre>
   * Cmdid字段错误
   * </pre>
   *
   * <code>CmdidFail = 5;</code>
   */
  public static final int CmdidFail_VALUE = 5;
  /**
   * <pre>
   * 序列化失败
   * </pre>
   *
   * <code>SerializeFail = 6;</code>
   */
  public static final int SerializeFail_VALUE = 6;
  /**
   * <pre>
   * 反序列化失败
   * </pre>
   *
   * <code>UnserializeFail = 7;</code>
   */
  public static final int UnserializeFail_VALUE = 7;
  /**
   * <pre>
   * 加密失败
   * </pre>
   *
   * <code>EncryptFail = 8;</code>
   */
  public static final int EncryptFail_VALUE = 8;
  /**
   * <pre>
   * 解密失败
   * </pre>
   *
   * <code>DecryptFail = 9;</code>
   */
  public static final int DecryptFail_VALUE = 9;
  /**
   * <pre>
   * 压缩失败
   * </pre>
   *
   * <code>CompressFail = 10;</code>
   */
  public static final int CompressFail_VALUE = 10;
  /**
   * <pre>
   * 解压失败
   * </pre>
   *
   * <code>UncompressFail = 11;</code>
   */
  public static final int UncompressFail_VALUE = 11;
  /**
   * <pre>
   * 终端异常
   * </pre>
   *
   * <code>EndpointFail = 12;</code>
   */
  public static final int EndpointFail_VALUE = 12;
  /**
   * <pre>
   * 用户元信息异常
   * </pre>
   *
   * <code>ClientInfoFail = 13;</code>
   */
  public static final int ClientInfoFail_VALUE = 13;
  /**
   * <pre>
   * 网关转发传输失败
   * </pre>
   *
   * <code>TransmitFail = 14;</code>
   */
  public static final int TransmitFail_VALUE = 14;
  /**
   * <pre>
   * protobuf/json序列化错误
   * </pre>
   *
   * <code>MarshalFail = 15;</code>
   */
  public static final int MarshalFail_VALUE = 15;
  /**
   * <pre>
   *参数错误
   * </pre>
   *
   * <code>ParamErr = 16;</code>
   */
  public static final int ParamErr_VALUE = 16;
  /**
   * <pre>
   *重复登录
   * </pre>
   *
   * <code>NewLogin = 17;</code>
   */
  public static final int NewLogin_VALUE = 17;
  /**
   * <pre>
   *未登录
   * </pre>
   *
   * <code>NotLogin = 18;</code>
   */
  public static final int NotLogin_VALUE = 18;
  /**
   * <pre>
   * 已登录
   * </pre>
   *
   * <code>HasLogin = 19;</code>
   */
  public static final int HasLogin_VALUE = 19;
  /**
   * <pre>
   *token校验失败
   * </pre>
   *
   * <code>TokenFail = 20;</code>
   */
  public static final int TokenFail_VALUE = 20;
  /**
   * <pre>
   * im登录失败
   * </pre>
   *
   * <code>ImLoginFail = 21;</code>
   */
  public static final int ImLoginFail_VALUE = 21;
  /**
   * <pre>
   *用户不存在
   * </pre>
   *
   * <code>UserNoExist = 22;</code>
   */
  public static final int UserNoExist_VALUE = 22;
  /**
   * <pre>
   *非法用户
   * </pre>
   *
   * <code>UserIllegal = 23;</code>
   */
  public static final int UserIllegal_VALUE = 23;
  /**
   * <pre>
   *连接异常断开
   * </pre>
   *
   * <code>LinkErr = 24;</code>
   */
  public static final int LinkErr_VALUE = 24;
  /**
   * <pre>
   * 敏感词
   * </pre>
   *
   * <code>FilterErr = 25;</code>
   */
  public static final int FilterErr_VALUE = 25;
  /**
   * <pre>
   * 数据库错误
   * </pre>
   *
   * <code>DBErr = 26;</code>
   */
  public static final int DBErr_VALUE = 26;
  /**
   * <pre>
   * 平台禁言
   * </pre>
   *
   * <code>PlatformBlock = 27;</code>
   */
  public static final int PlatformBlock_VALUE = 27;
  /**
   * <pre>
   * 对方拒收，包括黑名单，聊天设置中的相关规则
   * </pre>
   *
   * <code>TargetRejection = 28;</code>
   */
  public static final int TargetRejection_VALUE = 28;
  /**
   * <pre>
   * 发送频率太高
   * </pre>
   *
   * <code>RateErr = 29;</code>
   */
  public static final int RateErr_VALUE = 29;
  /**
   * <pre>
   * 服务器错误，比如崩溃等
   * </pre>
   *
   * <code>SvrErr = 30;</code>
   */
  public static final int SvrErr_VALUE = 30;
  /**
   * <pre>
   * sid不存在，校验失败
   * </pre>
   *
   * <code>SidErr = 31;</code>
   */
  public static final int SidErr_VALUE = 31;
  /**
   * <pre>
   * grpc链接错误
   * </pre>
   *
   * <code>GrpcConnErr = 32;</code>
   */
  public static final int GrpcConnErr_VALUE = 32;
  /**
   * <pre>
   * redis链接错误
   * </pre>
   *
   * <code>RdsConnErr = 33;</code>
   */
  public static final int RdsConnErr_VALUE = 33;
  /**
   * <pre>
   * 数据库链接错误
   * </pre>
   *
   * <code>DbConnErr = 34;</code>
   */
  public static final int DbConnErr_VALUE = 34;
  /**
   * <pre>
   * 用户信息获取错误
   * </pre>
   *
   * <code>UserGetErr = 35;</code>
   */
  public static final int UserGetErr_VALUE = 35;
  /**
   * <pre>
   * 空数据异常,或数据不对
   * </pre>
   *
   * <code>DataErr = 36;</code>
   */
  public static final int DataErr_VALUE = 36;
  /**
   * <pre>
   * rpc操作错误
   * </pre>
   *
   * <code>RpcOptErr = 37;</code>
   */
  public static final int RpcOptErr_VALUE = 37;
  /**
   * <pre>
   * redis操作错误
   * </pre>
   *
   * <code>RdsOptErr = 38;</code>
   */
  public static final int RdsOptErr_VALUE = 38;
  /**
   * <pre>
   * json格式错误
   * </pre>
   *
   * <code>JsonDataErr = 39;</code>
   */
  public static final int JsonDataErr_VALUE = 39;
  /**
   * <pre>
   * proto格式错误
   * </pre>
   *
   * <code>ProtoDataErr = 40;</code>
   */
  public static final int ProtoDataErr_VALUE = 40;
  /**
   * <pre>
   * 货币不足， 要做特定处理
   * </pre>
   *
   * <code>CurrencyLessErr = 41;</code>
   */
  public static final int CurrencyLessErr_VALUE = 41;
  /**
   * <pre>
   * php api访问错误
   * </pre>
   *
   * <code>ApiOptErr = 42;</code>
   */
  public static final int ApiOptErr_VALUE = 42;
  /**
   * <pre>
   * 各个业务员服务自定义错误基础值，新定义的值+CustomErr
   * </pre>
   *
   * <code>CustomErr = 1000;</code>
   */
  public static final int CustomErr_VALUE = 1000;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ErrorType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ErrorType forNumber(int value) {
    switch (value) {
      case 0: return Norm;
      case 1: return UnknowErr;
      case 2: return NilErr;
      case 3: return PackTooLarge;
      case 4: return PackVerFail;
      case 5: return CmdidFail;
      case 6: return SerializeFail;
      case 7: return UnserializeFail;
      case 8: return EncryptFail;
      case 9: return DecryptFail;
      case 10: return CompressFail;
      case 11: return UncompressFail;
      case 12: return EndpointFail;
      case 13: return ClientInfoFail;
      case 14: return TransmitFail;
      case 15: return MarshalFail;
      case 16: return ParamErr;
      case 17: return NewLogin;
      case 18: return NotLogin;
      case 19: return HasLogin;
      case 20: return TokenFail;
      case 21: return ImLoginFail;
      case 22: return UserNoExist;
      case 23: return UserIllegal;
      case 24: return LinkErr;
      case 25: return FilterErr;
      case 26: return DBErr;
      case 27: return PlatformBlock;
      case 28: return TargetRejection;
      case 29: return RateErr;
      case 30: return SvrErr;
      case 31: return SidErr;
      case 32: return GrpcConnErr;
      case 33: return RdsConnErr;
      case 34: return DbConnErr;
      case 35: return UserGetErr;
      case 36: return DataErr;
      case 37: return RpcOptErr;
      case 38: return RdsOptErr;
      case 39: return JsonDataErr;
      case 40: return ProtoDataErr;
      case 41: return CurrencyLessErr;
      case 42: return ApiOptErr;
      case 1000: return CustomErr;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ErrorType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ErrorType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ErrorType>() {
          public ErrorType findValueByNumber(int number) {
            return ErrorType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.proto.comm.Comm.getDescriptor().getEnumTypes().get(0);
  }

  private static final ErrorType[] VALUES = values();

  public static ErrorType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ErrorType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:comm.ErrorType)
}

