// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user/userdef.proto

package com.proto.user;

/**
 * <pre>
 * 用户权限类型定义
 * </pre>
 *
 * Protobuf enum {@code user.UserIdent}
 */
public enum UserIdent
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * 普通账号
   * </pre>
   *
   * <code>normal = 0;</code>
   */
  normal(0),
  /**
   * <pre>
   * 官方账号
   * </pre>
   *
   * <code>official = 1;</code>
   */
  official(1),
  /**
   * <pre>
   * 系统账号
   * </pre>
   *
   * <code>system = 2;</code>
   */
  system(2),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * 普通账号
   * </pre>
   *
   * <code>normal = 0;</code>
   */
  public static final int normal_VALUE = 0;
  /**
   * <pre>
   * 官方账号
   * </pre>
   *
   * <code>official = 1;</code>
   */
  public static final int official_VALUE = 1;
  /**
   * <pre>
   * 系统账号
   * </pre>
   *
   * <code>system = 2;</code>
   */
  public static final int system_VALUE = 2;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static UserIdent valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static UserIdent forNumber(int value) {
    switch (value) {
      case 0: return normal;
      case 1: return official;
      case 2: return system;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<UserIdent>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      UserIdent> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<UserIdent>() {
          public UserIdent findValueByNumber(int number) {
            return UserIdent.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.proto.user.User.getDescriptor().getEnumTypes().get(0);
  }

  private static final UserIdent[] VALUES = values();

  public static UserIdent valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private UserIdent(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:user.UserIdent)
}

