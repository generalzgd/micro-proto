// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm/common.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "comm/Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CommCommonRoot

@implementation CommCommonRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - CommCommonRoot_FileDescriptor

static GPBFileDescriptor *CommCommonRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"comm"
                                                 objcPrefix:@"Comm"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum CommErrorType

GPBEnumDescriptor *CommErrorType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Norm\000UnknowErr\000NilErr\000PackTooLarge\000PackV"
        "erFail\000CmdidFail\000SerializeFail\000Unseriali"
        "zeFail\000EncryptFail\000DecryptFail\000CompressF"
        "ail\000UncompressFail\000EndpointFail\000ClientIn"
        "foFail\000TransmitFail\000MarshalFail\000ParamErr"
        "\000NewLogin\000NotLogin\000HasLogin\000TokenFail\000Im"
        "LoginFail\000UserNoExist\000UserIllegal\000LinkEr"
        "r\000FilterErr\000Dberr\000PlatformBlock\000TargetRe"
        "jection\000RateErr\000SvrErr\000SidErr\000GrpcConnEr"
        "r\000RdsConnErr\000DbConnErr\000UserGetErr\000DataEr"
        "r\000RpcOptErr\000RdsOptErr\000JsonDataErr\000ProtoD"
        "ataErr\000CurrencyLessErr\000ApiOptErr\000CustomE"
        "rr\000";
    static const int32_t values[] = {
        CommErrorType_Norm,
        CommErrorType_UnknowErr,
        CommErrorType_NilErr,
        CommErrorType_PackTooLarge,
        CommErrorType_PackVerFail,
        CommErrorType_CmdidFail,
        CommErrorType_SerializeFail,
        CommErrorType_UnserializeFail,
        CommErrorType_EncryptFail,
        CommErrorType_DecryptFail,
        CommErrorType_CompressFail,
        CommErrorType_UncompressFail,
        CommErrorType_EndpointFail,
        CommErrorType_ClientInfoFail,
        CommErrorType_TransmitFail,
        CommErrorType_MarshalFail,
        CommErrorType_ParamErr,
        CommErrorType_NewLogin,
        CommErrorType_NotLogin,
        CommErrorType_HasLogin,
        CommErrorType_TokenFail,
        CommErrorType_ImLoginFail,
        CommErrorType_UserNoExist,
        CommErrorType_UserIllegal,
        CommErrorType_LinkErr,
        CommErrorType_FilterErr,
        CommErrorType_Dberr,
        CommErrorType_PlatformBlock,
        CommErrorType_TargetRejection,
        CommErrorType_RateErr,
        CommErrorType_SvrErr,
        CommErrorType_SidErr,
        CommErrorType_GrpcConnErr,
        CommErrorType_RdsConnErr,
        CommErrorType_DbConnErr,
        CommErrorType_UserGetErr,
        CommErrorType_DataErr,
        CommErrorType_RpcOptErr,
        CommErrorType_RdsOptErr,
        CommErrorType_JsonDataErr,
        CommErrorType_ProtoDataErr,
        CommErrorType_CurrencyLessErr,
        CommErrorType_ApiOptErr,
        CommErrorType_CustomErr,
    };
    static const char *extraTextFormatInfo = ",\000\004\000\001\t\000\002\006\000\003\014\000\004\013\000\005\t\000\006\r\000\007\017\000\010\013\000\t\013\000\n\014\000\013\016\000\014\014\000\r\016\000\016\014\000\017\013\000\020\010\000\021\010\000\022\010\000\023\010\000\024\t\000\025\013\000\026\013\000\027\013\000\030\007\000\031\t\000\032c\002\000\033\r\000\034\017\000\035\007\000\036\006\000\037\006\000 \013\000!\n\000\"\t\000#\n\000$\007\000%\t\000&\t\000\'\013\000(\014\000)\017\000*\t\000+\t\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CommErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CommErrorType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CommErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case CommErrorType_Norm:
    case CommErrorType_UnknowErr:
    case CommErrorType_NilErr:
    case CommErrorType_PackTooLarge:
    case CommErrorType_PackVerFail:
    case CommErrorType_CmdidFail:
    case CommErrorType_SerializeFail:
    case CommErrorType_UnserializeFail:
    case CommErrorType_EncryptFail:
    case CommErrorType_DecryptFail:
    case CommErrorType_CompressFail:
    case CommErrorType_UncompressFail:
    case CommErrorType_EndpointFail:
    case CommErrorType_ClientInfoFail:
    case CommErrorType_TransmitFail:
    case CommErrorType_MarshalFail:
    case CommErrorType_ParamErr:
    case CommErrorType_NewLogin:
    case CommErrorType_NotLogin:
    case CommErrorType_HasLogin:
    case CommErrorType_TokenFail:
    case CommErrorType_ImLoginFail:
    case CommErrorType_UserNoExist:
    case CommErrorType_UserIllegal:
    case CommErrorType_LinkErr:
    case CommErrorType_FilterErr:
    case CommErrorType_Dberr:
    case CommErrorType_PlatformBlock:
    case CommErrorType_TargetRejection:
    case CommErrorType_RateErr:
    case CommErrorType_SvrErr:
    case CommErrorType_SidErr:
    case CommErrorType_GrpcConnErr:
    case CommErrorType_RdsConnErr:
    case CommErrorType_DbConnErr:
    case CommErrorType_UserGetErr:
    case CommErrorType_DataErr:
    case CommErrorType_RpcOptErr:
    case CommErrorType_RdsOptErr:
    case CommErrorType_JsonDataErr:
    case CommErrorType_ProtoDataErr:
    case CommErrorType_CurrencyLessErr:
    case CommErrorType_ApiOptErr:
    case CommErrorType_CustomErr:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - CommReply

@implementation CommReply

@dynamic code;
@dynamic traceId;
@dynamic message;

typedef struct CommReply__storage_ {
  uint32_t _has_storage_[1];
  CommErrorType code;
  NSString *traceId;
  NSString *message;
} CommReply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.enumDescFunc = CommErrorType_EnumDescriptor,
        .number = CommReply_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CommReply__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "traceId",
        .dataTypeSpecific.className = NULL,
        .number = CommReply_FieldNumber_TraceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CommReply__storage_, traceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = CommReply_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CommReply__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CommReply class]
                                     rootClass:[CommCommonRoot class]
                                          file:CommCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CommReply__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CommReply_Code_RawValue(CommReply *message) {
  GPBDescriptor *descriptor = [CommReply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CommReply_FieldNumber_Code];
  return GPBGetMessageInt32Field(message, field);
}

void SetCommReply_Code_RawValue(CommReply *message, int32_t value) {
  GPBDescriptor *descriptor = [CommReply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CommReply_FieldNumber_Code];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - CommHeartbeat

@implementation CommHeartbeat


typedef struct CommHeartbeat__storage_ {
  uint32_t _has_storage_[1];
} CommHeartbeat__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CommHeartbeat class]
                                     rootClass:[CommCommonRoot class]
                                          file:CommCommonRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(CommHeartbeat__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CommError

@implementation CommError

@dynamic code;
@dynamic message;

typedef struct CommError__storage_ {
  uint32_t _has_storage_[1];
  CommErrorType code;
  NSString *message;
} CommError__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.enumDescFunc = CommErrorType_EnumDescriptor,
        .number = CommError_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CommError__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = CommError_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CommError__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CommError class]
                                     rootClass:[CommCommonRoot class]
                                          file:CommCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CommError__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CommError_Code_RawValue(CommError *message) {
  GPBDescriptor *descriptor = [CommError descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CommError_FieldNumber_Code];
  return GPBGetMessageInt32Field(message, field);
}

void SetCommError_Code_RawValue(CommError *message, int32_t value) {
  GPBDescriptor *descriptor = [CommError descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CommError_FieldNumber_Code];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
