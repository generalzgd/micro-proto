// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm/common.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum CommErrorType

/** ----------------------------------------- */
typedef GPB_ENUM(CommErrorType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  CommErrorType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  CommErrorType_Norm = 0,
  CommErrorType_UnknowErr = 1,

  /** 空指针 */
  CommErrorType_NilErr = 2,

  /** 协议包过大 */
  CommErrorType_PackTooLarge = 3,

  /** 协议版本号错误 */
  CommErrorType_PackVerFail = 4,

  /** Cmdid字段错误 */
  CommErrorType_CmdidFail = 5,

  /** 序列化失败 */
  CommErrorType_SerializeFail = 6,

  /** 反序列化失败 */
  CommErrorType_UnserializeFail = 7,

  /** 加密失败 */
  CommErrorType_EncryptFail = 8,

  /** 解密失败 */
  CommErrorType_DecryptFail = 9,

  /** 压缩失败 */
  CommErrorType_CompressFail = 10,

  /** 解压失败 */
  CommErrorType_UncompressFail = 11,

  /** 终端异常 */
  CommErrorType_EndpointFail = 12,

  /** 用户元信息异常 */
  CommErrorType_ClientInfoFail = 13,

  /** 网关转发传输失败 */
  CommErrorType_TransmitFail = 14,

  /** protobuf/json序列化错误 */
  CommErrorType_MarshalFail = 15,

  /** 参数错误 */
  CommErrorType_ParamErr = 16,

  /** 重复登录 */
  CommErrorType_NewLogin = 17,

  /** 未登录 */
  CommErrorType_NotLogin = 18,

  /** 已登录 */
  CommErrorType_HasLogin = 19,

  /** token校验失败 */
  CommErrorType_TokenFail = 20,

  /** im登录失败 */
  CommErrorType_ImLoginFail = 21,

  /** 用户不存在 */
  CommErrorType_UserNoExist = 22,

  /** 非法用户 */
  CommErrorType_UserIllegal = 23,

  /** 连接异常断开 */
  CommErrorType_LinkErr = 24,

  /** 敏感词 */
  CommErrorType_FilterErr = 25,

  /** 数据库错误 */
  CommErrorType_Dberr = 26,

  /** 平台禁言 */
  CommErrorType_PlatformBlock = 27,

  /** 对方拒收，包括黑名单，聊天设置中的相关规则 */
  CommErrorType_TargetRejection = 28,

  /** 发送频率太高 */
  CommErrorType_RateErr = 29,

  /** 服务器错误，比如崩溃等 */
  CommErrorType_SvrErr = 30,

  /** sid不存在，校验失败 */
  CommErrorType_SidErr = 31,

  /** grpc链接错误 */
  CommErrorType_GrpcConnErr = 32,

  /** redis链接错误 */
  CommErrorType_RdsConnErr = 33,

  /** 数据库链接错误 */
  CommErrorType_DbConnErr = 34,

  /** 用户信息获取错误 */
  CommErrorType_UserGetErr = 35,

  /** 空数据异常,或数据不对 */
  CommErrorType_DataErr = 36,

  /** rpc操作错误 */
  CommErrorType_RpcOptErr = 37,

  /** redis操作错误 */
  CommErrorType_RdsOptErr = 38,

  /** json格式错误 */
  CommErrorType_JsonDataErr = 39,

  /** proto格式错误 */
  CommErrorType_ProtoDataErr = 40,

  /** 货币不足， 要做特定处理 */
  CommErrorType_CurrencyLessErr = 41,

  /** php api访问错误 */
  CommErrorType_ApiOptErr = 42,

  /** 各个业务员服务自定义错误基础值，新定义的值+CustomErr */
  CommErrorType_CustomErr = 1000,
};

GPBEnumDescriptor *CommErrorType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL CommErrorType_IsValidValue(int32_t value);

#pragma mark - CommCommonRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface CommCommonRoot : GPBRootObject
@end

#pragma mark - CommReply

typedef GPB_ENUM(CommReply_FieldNumber) {
  CommReply_FieldNumber_Code = 1,
  CommReply_FieldNumber_TraceId = 2,
  CommReply_FieldNumber_Message = 3,
};

@interface CommReply : GPBMessage

@property(nonatomic, readwrite) CommErrorType code;

/** 用户的uuid，用来追踪用户消息链路 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *traceId;

/** 错误消息描述 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *message;

@end

/**
 * Fetches the raw value of a @c CommReply's @c code property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t CommReply_Code_RawValue(CommReply *message);
/**
 * Sets the raw value of an @c CommReply's @c code property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetCommReply_Code_RawValue(CommReply *message, int32_t value);

#pragma mark - CommHeartbeat

/**
 * -----------------------------------------
 * 心跳
 **/
@interface CommHeartbeat : GPBMessage

@end

#pragma mark - CommError

typedef GPB_ENUM(CommError_FieldNumber) {
  CommError_FieldNumber_Code = 1,
  CommError_FieldNumber_Message = 2,
};

/**
 * 异常
 **/
@interface CommError : GPBMessage

/** 错误码 */
@property(nonatomic, readwrite) CommErrorType code;

@property(nonatomic, readwrite, copy, null_resettable) NSString *message;

@end

/**
 * Fetches the raw value of a @c CommError's @c code property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t CommError_Code_RawValue(CommError *message);
/**
 * Sets the raw value of an @c CommError's @c code property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetCommError_Code_RawValue(CommError *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
