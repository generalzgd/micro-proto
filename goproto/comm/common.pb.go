// Code generated by protoc-gen-go. DO NOT EDIT.
// source: comm/common.proto

// protoc -I proto --go_out=plugins=grpc,paths=source_relative:./goproto ./proto/comm/common.proto

package comm

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// -----------------------------------------
type ErrorType int32

const (
	ErrorType_Norm      ErrorType = 0
	ErrorType_UnknowErr ErrorType = 1
	// 空指针
	ErrorType_NilErr ErrorType = 2
	// 协议包过大
	ErrorType_PackTooLarge ErrorType = 3
	// 协议版本号错误
	ErrorType_PackVerFail ErrorType = 4
	// Cmdid字段错误
	ErrorType_CmdidFail ErrorType = 5
	// 序列化失败
	ErrorType_SerializeFail ErrorType = 6
	// 反序列化失败
	ErrorType_UnserializeFail ErrorType = 7
	// 加密失败
	ErrorType_EncryptFail ErrorType = 8
	// 解密失败
	ErrorType_DecryptFail ErrorType = 9
	// 压缩失败
	ErrorType_CompressFail ErrorType = 10
	// 解压失败
	ErrorType_UncompressFail ErrorType = 11
	// 终端异常
	ErrorType_EndpointFail ErrorType = 12
	// 用户元信息异常
	ErrorType_ClientInfoFail ErrorType = 13
	// 网关转发传输失败
	ErrorType_TransmitFail ErrorType = 14
	// protobuf/json序列化错误
	ErrorType_MarshalFail ErrorType = 15
	//参数错误
	ErrorType_ParamErr ErrorType = 16
	//重复登录
	ErrorType_NewLogin ErrorType = 17
	//未登录
	ErrorType_NotLogin ErrorType = 18
	// 已登录
	ErrorType_HasLogin ErrorType = 19
	//token校验失败
	ErrorType_TokenFail ErrorType = 20
	// im登录失败
	ErrorType_ImLoginFail ErrorType = 21
	//用户不存在
	ErrorType_UserNoExist ErrorType = 22
	//非法用户
	ErrorType_UserIllegal ErrorType = 23
	//连接异常断开
	ErrorType_LinkErr ErrorType = 24
	// 敏感词
	ErrorType_FilterErr ErrorType = 25
	// 数据库错误
	ErrorType_DBErr ErrorType = 26
	// 平台禁言
	ErrorType_PlatformBlock ErrorType = 27
	// 对方拒收，包括黑名单，聊天设置中的相关规则
	ErrorType_TargetRejection ErrorType = 28
	// 发送频率太高
	ErrorType_RateErr ErrorType = 29
	// 服务器错误，比如崩溃等
	ErrorType_SvrErr ErrorType = 30
	// sid不存在，校验失败
	ErrorType_SidErr ErrorType = 31
	// grpc链接错误
	ErrorType_GrpcConnErr ErrorType = 32
	// redis链接错误
	ErrorType_RdsConnErr ErrorType = 33
	// 数据库链接错误
	ErrorType_DbConnErr ErrorType = 34
	// 用户信息获取错误
	ErrorType_UserGetErr ErrorType = 35
	// 空数据异常,或数据不对
	ErrorType_DataErr ErrorType = 36
	// rpc操作错误
	ErrorType_RpcOptErr ErrorType = 37
	// redis操作错误
	ErrorType_RdsOptErr ErrorType = 38
	// json格式错误
	ErrorType_JsonDataErr ErrorType = 39
	// proto格式错误
	ErrorType_ProtoDataErr ErrorType = 40
	// 货币不足， 要做特定处理
	ErrorType_CurrencyLessErr ErrorType = 41
	// php api访问错误
	ErrorType_ApiOptErr ErrorType = 42
	// 各个业务员服务自定义错误基础值，新定义的值+CustomErr
	ErrorType_CustomErr ErrorType = 1000
)

var ErrorType_name = map[int32]string{
	0:    "Norm",
	1:    "UnknowErr",
	2:    "NilErr",
	3:    "PackTooLarge",
	4:    "PackVerFail",
	5:    "CmdidFail",
	6:    "SerializeFail",
	7:    "UnserializeFail",
	8:    "EncryptFail",
	9:    "DecryptFail",
	10:   "CompressFail",
	11:   "UncompressFail",
	12:   "EndpointFail",
	13:   "ClientInfoFail",
	14:   "TransmitFail",
	15:   "MarshalFail",
	16:   "ParamErr",
	17:   "NewLogin",
	18:   "NotLogin",
	19:   "HasLogin",
	20:   "TokenFail",
	21:   "ImLoginFail",
	22:   "UserNoExist",
	23:   "UserIllegal",
	24:   "LinkErr",
	25:   "FilterErr",
	26:   "DBErr",
	27:   "PlatformBlock",
	28:   "TargetRejection",
	29:   "RateErr",
	30:   "SvrErr",
	31:   "SidErr",
	32:   "GrpcConnErr",
	33:   "RdsConnErr",
	34:   "DbConnErr",
	35:   "UserGetErr",
	36:   "DataErr",
	37:   "RpcOptErr",
	38:   "RdsOptErr",
	39:   "JsonDataErr",
	40:   "ProtoDataErr",
	41:   "CurrencyLessErr",
	42:   "ApiOptErr",
	1000: "CustomErr",
}

var ErrorType_value = map[string]int32{
	"Norm":            0,
	"UnknowErr":       1,
	"NilErr":          2,
	"PackTooLarge":    3,
	"PackVerFail":     4,
	"CmdidFail":       5,
	"SerializeFail":   6,
	"UnserializeFail": 7,
	"EncryptFail":     8,
	"DecryptFail":     9,
	"CompressFail":    10,
	"UncompressFail":  11,
	"EndpointFail":    12,
	"ClientInfoFail":  13,
	"TransmitFail":    14,
	"MarshalFail":     15,
	"ParamErr":        16,
	"NewLogin":        17,
	"NotLogin":        18,
	"HasLogin":        19,
	"TokenFail":       20,
	"ImLoginFail":     21,
	"UserNoExist":     22,
	"UserIllegal":     23,
	"LinkErr":         24,
	"FilterErr":       25,
	"DBErr":           26,
	"PlatformBlock":   27,
	"TargetRejection": 28,
	"RateErr":         29,
	"SvrErr":          30,
	"SidErr":          31,
	"GrpcConnErr":     32,
	"RdsConnErr":      33,
	"DbConnErr":       34,
	"UserGetErr":      35,
	"DataErr":         36,
	"RpcOptErr":       37,
	"RdsOptErr":       38,
	"JsonDataErr":     39,
	"ProtoDataErr":    40,
	"CurrencyLessErr": 41,
	"ApiOptErr":       42,
	"CustomErr":       1000,
}

func (x ErrorType) String() string {
	return proto.EnumName(ErrorType_name, int32(x))
}

func (ErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_75184b6866c85171, []int{0}
}

type CommReply struct {
	Code                 ErrorType `protobuf:"varint,1,opt,name=code,proto3,enum=comm.ErrorType" json:"code,omitempty"`
	TraceId              string    `protobuf:"bytes,2,opt,name=traceId,proto3" json:"traceId,omitempty"`
	Message              string    `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CommReply) Reset()         { *m = CommReply{} }
func (m *CommReply) String() string { return proto.CompactTextString(m) }
func (*CommReply) ProtoMessage()    {}
func (*CommReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_75184b6866c85171, []int{0}
}

func (m *CommReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommReply.Unmarshal(m, b)
}
func (m *CommReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommReply.Marshal(b, m, deterministic)
}
func (m *CommReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommReply.Merge(m, src)
}
func (m *CommReply) XXX_Size() int {
	return xxx_messageInfo_CommReply.Size(m)
}
func (m *CommReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CommReply.DiscardUnknown(m)
}

var xxx_messageInfo_CommReply proto.InternalMessageInfo

func (m *CommReply) GetCode() ErrorType {
	if m != nil {
		return m.Code
	}
	return ErrorType_Norm
}

func (m *CommReply) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (m *CommReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// -----------------------------------------
// 心跳
type Heartbeat struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Heartbeat) Reset()         { *m = Heartbeat{} }
func (m *Heartbeat) String() string { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()    {}
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_75184b6866c85171, []int{1}
}

func (m *Heartbeat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Heartbeat.Unmarshal(m, b)
}
func (m *Heartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Heartbeat.Marshal(b, m, deterministic)
}
func (m *Heartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Heartbeat.Merge(m, src)
}
func (m *Heartbeat) XXX_Size() int {
	return xxx_messageInfo_Heartbeat.Size(m)
}
func (m *Heartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_Heartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_Heartbeat proto.InternalMessageInfo

// 异常
type Error struct {
	Code                 ErrorType `protobuf:"varint,1,opt,name=code,proto3,enum=comm.ErrorType" json:"code,omitempty"`
	Message              string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_75184b6866c85171, []int{2}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() ErrorType {
	if m != nil {
		return m.Code
	}
	return ErrorType_Norm
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterEnum("comm.ErrorType", ErrorType_name, ErrorType_value)
	proto.RegisterType((*CommReply)(nil), "comm.CommReply")
	proto.RegisterType((*Heartbeat)(nil), "comm.Heartbeat")
	proto.RegisterType((*Error)(nil), "comm.Error")
}

func init() { proto.RegisterFile("comm/common.proto", fileDescriptor_75184b6866c85171) }

var fileDescriptor_75184b6866c85171 = []byte{
	// 622 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xdb, 0x72, 0xd3, 0x3a,
	0x14, 0x86, 0x77, 0xd2, 0xa4, 0xa9, 0x95, 0x36, 0x71, 0xd5, 0xbd, 0x37, 0xe1, 0x5c, 0x52, 0x0e,
	0xa5, 0x33, 0x34, 0x33, 0xf4, 0x92, 0x2b, 0x72, 0x68, 0x1b, 0x26, 0x84, 0x4c, 0x9a, 0x70, 0xc1,
	0x9d, 0x62, 0xaf, 0xba, 0x22, 0x96, 0x96, 0x47, 0x52, 0x29, 0xe9, 0xe3, 0xf0, 0x3a, 0xbc, 0x08,
	0x8f, 0xc1, 0x2c, 0xb9, 0x06, 0x7a, 0xc7, 0x8d, 0xa3, 0xff, 0x5b, 0xff, 0xfa, 0x97, 0x65, 0x45,
	0x6c, 0x3b, 0x42, 0xa5, 0x3a, 0xf4, 0x40, 0x7d, 0x98, 0x19, 0x74, 0xc8, 0x2b, 0xa4, 0xda, 0x31,
	0x0b, 0x7a, 0xa8, 0xd4, 0x14, 0xb2, 0x74, 0xc5, 0xf7, 0x58, 0x25, 0xc2, 0x18, 0x5a, 0xa5, 0xdd,
	0xd2, 0x7e, 0xe3, 0x75, 0xf3, 0x90, 0x1c, 0x87, 0x03, 0x63, 0xd0, 0xcc, 0x56, 0x19, 0x4c, 0x7d,
	0x91, 0xb7, 0x58, 0xcd, 0x19, 0x11, 0xc1, 0x30, 0x6e, 0x95, 0x77, 0x4b, 0xfb, 0xc1, 0xb4, 0x90,
	0x54, 0x51, 0x60, 0xad, 0x48, 0xa0, 0xb5, 0x96, 0x57, 0x6e, 0x64, 0xbb, 0xce, 0x82, 0x53, 0x10,
	0xc6, 0x2d, 0x40, 0xb8, 0xf6, 0x31, 0xab, 0xfa, 0xcc, 0xbf, 0x1e, 0x57, 0x84, 0x96, 0x6f, 0x85,
	0x1e, 0x7c, 0xaf, 0xb2, 0xe0, 0x97, 0x9b, 0x6f, 0xb0, 0xca, 0x18, 0x8d, 0x0a, 0xff, 0xe1, 0x5b,
	0x2c, 0x98, 0xeb, 0xa5, 0xc6, 0xab, 0x81, 0x31, 0x61, 0x89, 0x33, 0xb6, 0x3e, 0x96, 0x29, 0xad,
	0xcb, 0x3c, 0x64, 0x9b, 0x13, 0x11, 0x2d, 0x67, 0x88, 0x23, 0x61, 0x12, 0x08, 0xd7, 0x78, 0x93,
	0xd5, 0x89, 0x7c, 0x04, 0x73, 0x2c, 0x64, 0x1a, 0x56, 0xa8, 0xbb, 0xa7, 0x62, 0x19, 0x7b, 0x59,
	0xe5, 0xdb, 0x6c, 0xeb, 0x0c, 0x8c, 0x14, 0xa9, 0xbc, 0x06, 0x8f, 0xd6, 0xf9, 0x0e, 0x6b, 0xce,
	0xb5, 0xbd, 0x05, 0x6b, 0x94, 0x33, 0xd0, 0x91, 0x59, 0x65, 0xce, 0x83, 0x0d, 0x02, 0x7d, 0xf8,
	0x0d, 0x02, 0x9a, 0xdd, 0x43, 0x95, 0x19, 0xb0, 0xd6, 0x13, 0xc6, 0x39, 0x6b, 0xcc, 0x75, 0xf4,
	0x27, 0xab, 0x93, 0x6b, 0xa0, 0xe3, 0x0c, 0xa5, 0xce, 0xfb, 0x36, 0xc9, 0xd5, 0x4b, 0x25, 0x68,
	0x37, 0xd4, 0xe7, 0xe8, 0xd9, 0x16, 0xb9, 0x66, 0x46, 0x68, 0xab, 0x64, 0xee, 0x6a, 0xd0, 0xb8,
	0xf7, 0xc2, 0xd8, 0x0b, 0x91, 0x7a, 0xd0, 0xe4, 0x9b, 0x6c, 0x63, 0x22, 0x8c, 0x50, 0xb4, 0xf1,
	0x90, 0xd4, 0x18, 0xae, 0x46, 0x98, 0x48, 0x1d, 0x6e, 0x7b, 0x85, 0x2e, 0x57, 0x9c, 0xd4, 0xa9,
	0xb0, 0xb9, 0xda, 0xa1, 0xfd, 0xcf, 0x70, 0x09, 0xda, 0xc7, 0xfc, 0x4b, 0xb9, 0x43, 0xe5, 0x6b,
	0x1e, 0xfc, 0x47, 0x60, 0x6e, 0xc1, 0x8c, 0x71, 0xf0, 0x55, 0x5a, 0x17, 0xfe, 0x5f, 0x80, 0x61,
	0x9a, 0x42, 0x22, 0xd2, 0xf0, 0x0e, 0xaf, 0xb3, 0xda, 0x48, 0xea, 0x25, 0x0d, 0x6e, 0x51, 0xdc,
	0xb1, 0x4c, 0x1d, 0x18, 0x92, 0x77, 0x79, 0xc0, 0xaa, 0xfd, 0x2e, 0x2d, 0xef, 0xd1, 0x97, 0x9d,
	0xa4, 0xc2, 0x9d, 0xa3, 0x51, 0xdd, 0x14, 0xa3, 0x65, 0x78, 0x9f, 0xbe, 0xec, 0x8c, 0xce, 0xc5,
	0x4d, 0xe1, 0x33, 0x44, 0x4e, 0xa2, 0x0e, 0x1f, 0x50, 0xdc, 0x54, 0x38, 0xa0, 0xa6, 0x87, 0x74,
	0x98, 0x67, 0x5f, 0x7c, 0xd6, 0x23, 0xbf, 0x96, 0x31, 0xad, 0x1f, 0xd3, 0x4b, 0x9c, 0x98, 0x2c,
	0xea, 0xa1, 0xd6, 0x04, 0x76, 0x79, 0x83, 0xb1, 0x69, 0x6c, 0x0b, 0xfd, 0x84, 0xde, 0xa3, 0xbf,
	0x28, 0x64, 0x9b, 0xca, 0xf4, 0xd2, 0x27, 0xe0, 0x48, 0xef, 0xd1, 0x90, 0xbe, 0x70, 0x82, 0xc4,
	0x53, 0xf2, 0x4e, 0xb3, 0xe8, 0x43, 0xe6, 0x6b, 0xcf, 0xbc, 0x8c, 0xed, 0x8d, 0x7c, 0x4e, 0xa3,
	0xde, 0x59, 0xd4, 0x85, 0xfd, 0x85, 0xff, 0x53, 0xd1, 0x8d, 0x2a, 0xc8, 0x3e, 0xed, 0xa3, 0x77,
	0x69, 0x0c, 0xe8, 0x68, 0x35, 0x02, 0x6b, 0x09, 0xbe, 0xa4, 0x98, 0xb7, 0x99, 0xbc, 0x89, 0x39,
	0xe0, 0x0d, 0x16, 0xf4, 0x2e, 0xad, 0x43, 0x7f, 0x40, 0x3f, 0x6a, 0xdd, 0x19, 0x6b, 0x44, 0xa8,
	0xf2, 0xbb, 0xe9, 0x6f, 0x42, 0xb7, 0x42, 0x17, 0x73, 0x52, 0xfa, 0x74, 0x94, 0x48, 0x77, 0x71,
	0xb9, 0x20, 0xd8, 0x49, 0x40, 0x83, 0x11, 0xe9, 0x75, 0x12, 0x77, 0x94, 0x8c, 0x0c, 0xbe, 0xf2,
	0xfe, 0x4e, 0x82, 0xf9, 0x2f, 0xf5, 0xbd, 0xa1, 0xc7, 0xb7, 0xb2, 0xef, 0x5e, 0xac, 0x7b, 0x7e,
	0xf4, 0x33, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x6e, 0xc6, 0x43, 0x00, 0x04, 0x00, 0x00,
}
