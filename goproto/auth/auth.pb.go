// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth/auth.proto

package auth

import (
	context "context"
	fmt "fmt"
	comm "github.com/generalzgd/micro-proto/goproto/comm"
	gw "github.com/generalzgd/micro-proto/goproto/gw"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// protoc -I proto --go_out=plugins=grpc,paths=source_relative:./goproto ./proto/auth/authorize.proto
type GetAdminListRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAdminListRequest) Reset()         { *m = GetAdminListRequest{} }
func (m *GetAdminListRequest) String() string { return proto.CompactTextString(m) }
func (*GetAdminListRequest) ProtoMessage()    {}
func (*GetAdminListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_712ec48c1eaf43a2, []int{0}
}

func (m *GetAdminListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAdminListRequest.Unmarshal(m, b)
}
func (m *GetAdminListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAdminListRequest.Marshal(b, m, deterministic)
}
func (m *GetAdminListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAdminListRequest.Merge(m, src)
}
func (m *GetAdminListRequest) XXX_Size() int {
	return xxx_messageInfo_GetAdminListRequest.Size(m)
}
func (m *GetAdminListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAdminListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAdminListRequest proto.InternalMessageInfo

type GetAdminListReply struct {
	Code                 comm.ErrorType `protobuf:"varint,1,opt,name=code,proto3,enum=comm.ErrorType" json:"code,omitempty"`
	Message              string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	OfficialUids         []uint32       `protobuf:"varint,3,rep,packed,name=officialUids,proto3" json:"officialUids,omitempty"`
	SystemUids           []uint32       `protobuf:"varint,4,rep,packed,name=systemUids,proto3" json:"systemUids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetAdminListReply) Reset()         { *m = GetAdminListReply{} }
func (m *GetAdminListReply) String() string { return proto.CompactTextString(m) }
func (*GetAdminListReply) ProtoMessage()    {}
func (*GetAdminListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_712ec48c1eaf43a2, []int{1}
}

func (m *GetAdminListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAdminListReply.Unmarshal(m, b)
}
func (m *GetAdminListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAdminListReply.Marshal(b, m, deterministic)
}
func (m *GetAdminListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAdminListReply.Merge(m, src)
}
func (m *GetAdminListReply) XXX_Size() int {
	return xxx_messageInfo_GetAdminListReply.Size(m)
}
func (m *GetAdminListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAdminListReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetAdminListReply proto.InternalMessageInfo

func (m *GetAdminListReply) GetCode() comm.ErrorType {
	if m != nil {
		return m.Code
	}
	return comm.ErrorType_Norm
}

func (m *GetAdminListReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetAdminListReply) GetOfficialUids() []uint32 {
	if m != nil {
		return m.OfficialUids
	}
	return nil
}

func (m *GetAdminListReply) GetSystemUids() []uint32 {
	if m != nil {
		return m.SystemUids
	}
	return nil
}

// 批量获取用户基本信息（s2s），不包含查第三方绑定的游戏账号
type GetMultiUserInfoRequest struct {
	TargetUids []uint32 `protobuf:"varint,1,rep,packed,name=targetUids,proto3" json:"targetUids,omitempty"`
	TraceId    string   `protobuf:"bytes,2,opt,name=traceId,proto3" json:"traceId,omitempty"`
	// 第三方绑定的游戏ID，0:不查
	ThirdGameId          uint32   `protobuf:"varint,3,opt,name=thirdGameId,proto3" json:"thirdGameId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMultiUserInfoRequest) Reset()         { *m = GetMultiUserInfoRequest{} }
func (m *GetMultiUserInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetMultiUserInfoRequest) ProtoMessage()    {}
func (*GetMultiUserInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_712ec48c1eaf43a2, []int{2}
}

func (m *GetMultiUserInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMultiUserInfoRequest.Unmarshal(m, b)
}
func (m *GetMultiUserInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMultiUserInfoRequest.Marshal(b, m, deterministic)
}
func (m *GetMultiUserInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMultiUserInfoRequest.Merge(m, src)
}
func (m *GetMultiUserInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetMultiUserInfoRequest.Size(m)
}
func (m *GetMultiUserInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMultiUserInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMultiUserInfoRequest proto.InternalMessageInfo

func (m *GetMultiUserInfoRequest) GetTargetUids() []uint32 {
	if m != nil {
		return m.TargetUids
	}
	return nil
}

func (m *GetMultiUserInfoRequest) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (m *GetMultiUserInfoRequest) GetThirdGameId() uint32 {
	if m != nil {
		return m.ThirdGameId
	}
	return 0
}

// 批量响应用户基本信息（s2s）
type GetMultiUserInfoReply struct {
	Code    comm.ErrorType `protobuf:"varint,1,opt,name=code,proto3,enum=comm.ErrorType" json:"code,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	TraceId string         `protobuf:"bytes,3,opt,name=traceId,proto3" json:"traceId,omitempty"`
	// 用户信息，包含第三方账号
	List                 []*CommAccount `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetMultiUserInfoReply) Reset()         { *m = GetMultiUserInfoReply{} }
func (m *GetMultiUserInfoReply) String() string { return proto.CompactTextString(m) }
func (*GetMultiUserInfoReply) ProtoMessage()    {}
func (*GetMultiUserInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_712ec48c1eaf43a2, []int{3}
}

func (m *GetMultiUserInfoReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMultiUserInfoReply.Unmarshal(m, b)
}
func (m *GetMultiUserInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMultiUserInfoReply.Marshal(b, m, deterministic)
}
func (m *GetMultiUserInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMultiUserInfoReply.Merge(m, src)
}
func (m *GetMultiUserInfoReply) XXX_Size() int {
	return xxx_messageInfo_GetMultiUserInfoReply.Size(m)
}
func (m *GetMultiUserInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMultiUserInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetMultiUserInfoReply proto.InternalMessageInfo

func (m *GetMultiUserInfoReply) GetCode() comm.ErrorType {
	if m != nil {
		return m.Code
	}
	return comm.ErrorType_Norm
}

func (m *GetMultiUserInfoReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetMultiUserInfoReply) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (m *GetMultiUserInfoReply) GetList() []*CommAccount {
	if m != nil {
		return m.List
	}
	return nil
}

type CommAccount struct {
	// userinfo: 只输出uid, nickname, avatar. 使用的时候需要特别注意
	User *gw.UserInfo `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// 第三方游戏账号信息，需要接收方转换成对应的结构体
	Third                map[string]string `protobuf:"bytes,2,rep,name=third,proto3" json:"third,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CommAccount) Reset()         { *m = CommAccount{} }
func (m *CommAccount) String() string { return proto.CompactTextString(m) }
func (*CommAccount) ProtoMessage()    {}
func (*CommAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_712ec48c1eaf43a2, []int{4}
}

func (m *CommAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommAccount.Unmarshal(m, b)
}
func (m *CommAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommAccount.Marshal(b, m, deterministic)
}
func (m *CommAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommAccount.Merge(m, src)
}
func (m *CommAccount) XXX_Size() int {
	return xxx_messageInfo_CommAccount.Size(m)
}
func (m *CommAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_CommAccount.DiscardUnknown(m)
}

var xxx_messageInfo_CommAccount proto.InternalMessageInfo

func (m *CommAccount) GetUser() *gw.UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *CommAccount) GetThird() map[string]string {
	if m != nil {
		return m.Third
	}
	return nil
}

// 校验用信息请求，sid为php生成的ID
type ValidateRequest struct {
	Sid                  string   `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	TraceId              string   `protobuf:"bytes,2,opt,name=traceId,proto3" json:"traceId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidateRequest) Reset()         { *m = ValidateRequest{} }
func (m *ValidateRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateRequest) ProtoMessage()    {}
func (*ValidateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_712ec48c1eaf43a2, []int{5}
}

func (m *ValidateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateRequest.Unmarshal(m, b)
}
func (m *ValidateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateRequest.Marshal(b, m, deterministic)
}
func (m *ValidateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateRequest.Merge(m, src)
}
func (m *ValidateRequest) XXX_Size() int {
	return xxx_messageInfo_ValidateRequest.Size(m)
}
func (m *ValidateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateRequest proto.InternalMessageInfo

func (m *ValidateRequest) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *ValidateRequest) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

// 校验用户信息响应，如果不存在sid的key, 则返回失败；如果sid存在，则返回对应的value，并转化为userinfo结构体
type ValidateReply struct {
	Code                 comm.ErrorType `protobuf:"varint,1,opt,name=code,proto3,enum=comm.ErrorType" json:"code,omitempty"`
	Message              string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Info                 *gw.UserInfo   `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	TraceId              string         `protobuf:"bytes,4,opt,name=traceId,proto3" json:"traceId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ValidateReply) Reset()         { *m = ValidateReply{} }
func (m *ValidateReply) String() string { return proto.CompactTextString(m) }
func (*ValidateReply) ProtoMessage()    {}
func (*ValidateReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_712ec48c1eaf43a2, []int{6}
}

func (m *ValidateReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateReply.Unmarshal(m, b)
}
func (m *ValidateReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateReply.Marshal(b, m, deterministic)
}
func (m *ValidateReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateReply.Merge(m, src)
}
func (m *ValidateReply) XXX_Size() int {
	return xxx_messageInfo_ValidateReply.Size(m)
}
func (m *ValidateReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateReply.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateReply proto.InternalMessageInfo

func (m *ValidateReply) GetCode() comm.ErrorType {
	if m != nil {
		return m.Code
	}
	return comm.ErrorType_Norm
}

func (m *ValidateReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ValidateReply) GetInfo() *gw.UserInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *ValidateReply) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func init() {
	proto.RegisterType((*GetAdminListRequest)(nil), "auth.GetAdminListRequest")
	proto.RegisterType((*GetAdminListReply)(nil), "auth.GetAdminListReply")
	proto.RegisterType((*GetMultiUserInfoRequest)(nil), "auth.GetMultiUserInfoRequest")
	proto.RegisterType((*GetMultiUserInfoReply)(nil), "auth.GetMultiUserInfoReply")
	proto.RegisterType((*CommAccount)(nil), "auth.CommAccount")
	proto.RegisterMapType((map[string]string)(nil), "auth.CommAccount.ThirdEntry")
	proto.RegisterType((*ValidateRequest)(nil), "auth.ValidateRequest")
	proto.RegisterType((*ValidateReply)(nil), "auth.ValidateReply")
}

func init() { proto.RegisterFile("auth/auth.proto", fileDescriptor_712ec48c1eaf43a2) }

var fileDescriptor_712ec48c1eaf43a2 = []byte{
	// 612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4f, 0x6f, 0xd3, 0x3e,
	0x18, 0xfe, 0x65, 0xc9, 0xf6, 0xd3, 0xde, 0xae, 0x5b, 0xeb, 0xb1, 0x2d, 0x84, 0x3f, 0xaa, 0x82,
	0x90, 0x7a, 0x21, 0x11, 0xe1, 0x32, 0x81, 0x38, 0x14, 0x18, 0xd5, 0xa4, 0x22, 0x4d, 0xd1, 0xc6,
	0x81, 0x5b, 0x48, 0xdc, 0xd4, 0x22, 0x89, 0x3b, 0xdb, 0x99, 0x94, 0x7d, 0x06, 0xce, 0x70, 0xe4,
	0x8b, 0xf1, 0x61, 0x90, 0xed, 0xa5, 0x4d, 0xba, 0xf6, 0xb6, 0x8b, 0x1b, 0x3f, 0x8f, 0x9f, 0xe7,
	0x7d, 0xfc, 0xba, 0x36, 0x1c, 0x44, 0xa5, 0x98, 0xf9, 0x72, 0xf0, 0xe6, 0x8c, 0x0a, 0x8a, 0x2c,
	0xf9, 0xed, 0xf4, 0x63, 0x9a, 0xe7, 0xbe, 0x1c, 0x68, 0xa1, 0x09, 0x07, 0x95, 0x1c, 0x33, 0x5f,
	0x0e, 0x09, 0x9e, 0x6a, 0xcc, 0x3d, 0x82, 0xc3, 0x31, 0x16, 0xa3, 0x24, 0x27, 0xc5, 0x84, 0x70,
	0x11, 0xe2, 0xeb, 0x12, 0x73, 0xe1, 0xfe, 0x32, 0xa0, 0xdf, 0xc6, 0xe7, 0x59, 0x85, 0x5e, 0x80,
	0x15, 0xd3, 0x04, 0xdb, 0xc6, 0xc0, 0x18, 0xee, 0x07, 0x07, 0x9e, 0x74, 0xf7, 0xce, 0x18, 0xa3,
	0xec, 0xb2, 0x9a, 0xe3, 0x50, 0x91, 0xc8, 0x86, 0xff, 0x73, 0xcc, 0x79, 0x94, 0x62, 0x7b, 0x6b,
	0x60, 0x0c, 0x77, 0xc3, 0x7a, 0x8a, 0x5c, 0xd8, 0xa3, 0xd3, 0x29, 0x89, 0x49, 0x94, 0x5d, 0x91,
	0x84, 0xdb, 0xe6, 0xc0, 0x1c, 0x76, 0xc3, 0x16, 0x86, 0x9e, 0x03, 0xf0, 0x8a, 0x0b, 0x9c, 0xab,
	0x15, 0x96, 0x5a, 0xd1, 0x40, 0xdc, 0x12, 0x4e, 0xc6, 0x58, 0x7c, 0x29, 0x33, 0x41, 0xae, 0x38,
	0x66, 0xe7, 0xc5, 0x94, 0xde, 0x65, 0x96, 0x52, 0x11, 0xb1, 0x14, 0x0b, 0x25, 0x35, 0xb4, 0x74,
	0x89, 0xc8, 0x60, 0x82, 0x45, 0x31, 0x3e, 0x4f, 0xea, 0x60, 0x77, 0x53, 0x34, 0x80, 0x8e, 0x98,
	0x11, 0x96, 0x8c, 0xa3, 0x5c, 0xb2, 0xe6, 0xc0, 0x18, 0x76, 0xc3, 0x26, 0xe4, 0xfe, 0x36, 0xe0,
	0xe8, 0x7e, 0xdd, 0x07, 0xe8, 0x49, 0x23, 0x94, 0xd9, 0x0e, 0xf5, 0x12, 0xac, 0x8c, 0x70, 0xa1,
	0x7a, 0xd0, 0x09, 0xfa, 0x9e, 0x3a, 0xe1, 0x8f, 0x34, 0xcf, 0x47, 0x71, 0x4c, 0xcb, 0x42, 0x84,
	0x8a, 0x76, 0xff, 0x18, 0xd0, 0x69, 0xa0, 0xc8, 0x05, 0x4b, 0x9e, 0xb0, 0xca, 0xd3, 0x09, 0xf6,
	0x3d, 0x39, 0xf1, 0x16, 0x91, 0x15, 0x87, 0x02, 0xd8, 0x56, 0x9b, 0xb3, 0xb7, 0x94, 0xf7, 0xd3,
	0x7b, 0xde, 0xde, 0xa5, 0xa4, 0xcf, 0x0a, 0xc1, 0xaa, 0x50, 0x2f, 0x75, 0x4e, 0x01, 0x96, 0x20,
	0xea, 0x81, 0xf9, 0x03, 0x57, 0xaa, 0xc8, 0x6e, 0x28, 0x3f, 0xd1, 0x23, 0xd8, 0xbe, 0x89, 0xb2,
	0xb2, 0xde, 0xa0, 0x9e, 0xbc, 0xdd, 0x3a, 0x35, 0xdc, 0xf7, 0x70, 0xf0, 0x35, 0xca, 0x48, 0x12,
	0x09, 0x5c, 0x1f, 0x55, 0x0f, 0x4c, 0x4e, 0x92, 0x5a, 0xce, 0x49, 0xb2, 0xf9, 0x70, 0xdc, 0x9f,
	0x06, 0x74, 0x97, 0xfa, 0x07, 0xf9, 0x1b, 0x5a, 0xa4, 0x98, 0x52, 0xd5, 0xef, 0x35, 0x1d, 0x92,
	0x5c, 0x33, 0x8e, 0xd5, 0x8a, 0x13, 0xfc, 0x35, 0x61, 0x77, 0x54, 0x8a, 0x19, 0x65, 0xe4, 0x16,
	0xa3, 0xcf, 0x70, 0x5c, 0x67, 0x1b, 0x15, 0xc9, 0x18, 0x8b, 0xda, 0x07, 0x1d, 0xe9, 0xa6, 0xae,
	0xec, 0xdc, 0x39, 0x5c, 0x85, 0xe7, 0x59, 0xe5, 0xfe, 0x87, 0x7c, 0xd8, 0x9e, 0xd0, 0x94, 0x14,
	0x08, 0xe9, 0x38, 0x6a, 0x52, 0x6b, 0x7a, 0x2d, 0x4c, 0x0b, 0x02, 0xd8, 0x99, 0xd0, 0x94, 0x96,
	0x02, 0x1d, 0x2e, 0x58, 0x5a, 0xd6, 0xf7, 0xd7, 0xe9, 0xb7, 0x41, 0xad, 0x19, 0x41, 0xa7, 0x99,
	0xd0, 0xd6, 0x6b, 0x1a, 0x50, 0xad, 0x3e, 0x5e, 0xc3, 0x68, 0x8b, 0x0b, 0xe8, 0xad, 0x5e, 0x03,
	0xf4, 0x4c, 0x6f, 0x69, 0xc3, 0xb5, 0x74, 0x9e, 0x6c, 0xa2, 0xb5, 0xe3, 0x18, 0xba, 0x77, 0x75,
	0x2e, 0x26, 0xf8, 0x06, 0x67, 0xc8, 0x69, 0x15, 0xd7, 0x60, 0xed, 0x65, 0xaf, 0xe5, 0xb4, 0xd1,
	0x27, 0xd8, 0x6b, 0xbe, 0x58, 0xe8, 0xf1, 0xa2, 0xee, 0xea, 0xeb, 0xe6, 0x9c, 0xac, 0xa3, 0x94,
	0xcb, 0x87, 0xd7, 0xdf, 0xfc, 0x59, 0x29, 0x04, 0xf6, 0x6e, 0x67, 0x51, 0x71, 0x4d, 0x3c, 0x71,
	0xe3, 0xa7, 0xd4, 0x4f, 0xd9, 0x3c, 0x7e, 0xa5, 0x1e, 0x4c, 0x3f, 0xa5, 0xfa, 0x57, 0x3a, 0xbc,
	0x93, 0xc3, 0xf7, 0x1d, 0x05, 0xbc, 0xf9, 0x17, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x60, 0x51, 0x8b,
	0x89, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthorizeClient is the client API for Authorize service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthorizeClient interface {
	// 校验用户sid, 并返回用户信息
	ValidateAndGetUserInfo(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateReply, error)
	// 通用登录
	Login(ctx context.Context, in *gw.LoginRequest, opts ...grpc.CallOption) (*gw.LoginReply, error)
	// 通用登录
	Logout(ctx context.Context, in *gw.LogoutRequest, opts ...grpc.CallOption) (*gw.LogoutReply, error)
	// 获得用户信息（含用户等级信息）
	GetUserInfo(ctx context.Context, in *gw.GetUserInfoRequest, opts ...grpc.CallOption) (*gw.GetUserInfoReply, error)
	//  批量获取用户信息 s2s
	GetMultiUserInfo(ctx context.Context, in *GetMultiUserInfoRequest, opts ...grpc.CallOption) (*GetMultiUserInfoReply, error)
	//  获取用户等级信息, 供服务间调用
	GetUserPLevel(ctx context.Context, in *gw.GetUserPLevelRequest, opts ...grpc.CallOption) (*gw.GetUserPLevelReply, error)
	//  获取管理员/官方用户信息列表
	GetAdminList(ctx context.Context, in *GetAdminListRequest, opts ...grpc.CallOption) (*GetAdminListReply, error)
}

type authorizeClient struct {
	cc *grpc.ClientConn
}

func NewAuthorizeClient(cc *grpc.ClientConn) AuthorizeClient {
	return &authorizeClient{cc}
}

func (c *authorizeClient) ValidateAndGetUserInfo(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateReply, error) {
	out := new(ValidateReply)
	err := c.cc.Invoke(ctx, "/auth.Authorize/ValidateAndGetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizeClient) Login(ctx context.Context, in *gw.LoginRequest, opts ...grpc.CallOption) (*gw.LoginReply, error) {
	out := new(gw.LoginReply)
	err := c.cc.Invoke(ctx, "/auth.Authorize/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizeClient) Logout(ctx context.Context, in *gw.LogoutRequest, opts ...grpc.CallOption) (*gw.LogoutReply, error) {
	out := new(gw.LogoutReply)
	err := c.cc.Invoke(ctx, "/auth.Authorize/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizeClient) GetUserInfo(ctx context.Context, in *gw.GetUserInfoRequest, opts ...grpc.CallOption) (*gw.GetUserInfoReply, error) {
	out := new(gw.GetUserInfoReply)
	err := c.cc.Invoke(ctx, "/auth.Authorize/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizeClient) GetMultiUserInfo(ctx context.Context, in *GetMultiUserInfoRequest, opts ...grpc.CallOption) (*GetMultiUserInfoReply, error) {
	out := new(GetMultiUserInfoReply)
	err := c.cc.Invoke(ctx, "/auth.Authorize/GetMultiUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizeClient) GetUserPLevel(ctx context.Context, in *gw.GetUserPLevelRequest, opts ...grpc.CallOption) (*gw.GetUserPLevelReply, error) {
	out := new(gw.GetUserPLevelReply)
	err := c.cc.Invoke(ctx, "/auth.Authorize/GetUserPLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizeClient) GetAdminList(ctx context.Context, in *GetAdminListRequest, opts ...grpc.CallOption) (*GetAdminListReply, error) {
	out := new(GetAdminListReply)
	err := c.cc.Invoke(ctx, "/auth.Authorize/GetAdminList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizeServer is the server API for Authorize service.
type AuthorizeServer interface {
	// 校验用户sid, 并返回用户信息
	ValidateAndGetUserInfo(context.Context, *ValidateRequest) (*ValidateReply, error)
	// 通用登录
	Login(context.Context, *gw.LoginRequest) (*gw.LoginReply, error)
	// 通用登录
	Logout(context.Context, *gw.LogoutRequest) (*gw.LogoutReply, error)
	// 获得用户信息（含用户等级信息）
	GetUserInfo(context.Context, *gw.GetUserInfoRequest) (*gw.GetUserInfoReply, error)
	//  批量获取用户信息 s2s
	GetMultiUserInfo(context.Context, *GetMultiUserInfoRequest) (*GetMultiUserInfoReply, error)
	//  获取用户等级信息, 供服务间调用
	GetUserPLevel(context.Context, *gw.GetUserPLevelRequest) (*gw.GetUserPLevelReply, error)
	//  获取管理员/官方用户信息列表
	GetAdminList(context.Context, *GetAdminListRequest) (*GetAdminListReply, error)
}

// UnimplementedAuthorizeServer can be embedded to have forward compatible implementations.
type UnimplementedAuthorizeServer struct {
}

func (*UnimplementedAuthorizeServer) ValidateAndGetUserInfo(ctx context.Context, req *ValidateRequest) (*ValidateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAndGetUserInfo not implemented")
}
func (*UnimplementedAuthorizeServer) Login(ctx context.Context, req *gw.LoginRequest) (*gw.LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedAuthorizeServer) Logout(ctx context.Context, req *gw.LogoutRequest) (*gw.LogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedAuthorizeServer) GetUserInfo(ctx context.Context, req *gw.GetUserInfoRequest) (*gw.GetUserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (*UnimplementedAuthorizeServer) GetMultiUserInfo(ctx context.Context, req *GetMultiUserInfoRequest) (*GetMultiUserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiUserInfo not implemented")
}
func (*UnimplementedAuthorizeServer) GetUserPLevel(ctx context.Context, req *gw.GetUserPLevelRequest) (*gw.GetUserPLevelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPLevel not implemented")
}
func (*UnimplementedAuthorizeServer) GetAdminList(ctx context.Context, req *GetAdminListRequest) (*GetAdminListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminList not implemented")
}

func RegisterAuthorizeServer(s *grpc.Server, srv AuthorizeServer) {
	s.RegisterService(&_Authorize_serviceDesc, srv)
}

func _Authorize_ValidateAndGetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServer).ValidateAndGetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorize/ValidateAndGetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServer).ValidateAndGetUserInfo(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorize_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gw.LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorize/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServer).Login(ctx, req.(*gw.LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorize_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gw.LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorize/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServer).Logout(ctx, req.(*gw.LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorize_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gw.GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorize/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServer).GetUserInfo(ctx, req.(*gw.GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorize_GetMultiUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServer).GetMultiUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorize/GetMultiUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServer).GetMultiUserInfo(ctx, req.(*GetMultiUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorize_GetUserPLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gw.GetUserPLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServer).GetUserPLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorize/GetUserPLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServer).GetUserPLevel(ctx, req.(*gw.GetUserPLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorize_GetAdminList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServer).GetAdminList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorize/GetAdminList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServer).GetAdminList(ctx, req.(*GetAdminListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authorize_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Authorize",
	HandlerType: (*AuthorizeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateAndGetUserInfo",
			Handler:    _Authorize_ValidateAndGetUserInfo_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Authorize_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Authorize_Logout_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Authorize_GetUserInfo_Handler,
		},
		{
			MethodName: "GetMultiUserInfo",
			Handler:    _Authorize_GetMultiUserInfo_Handler,
		},
		{
			MethodName: "GetUserPLevel",
			Handler:    _Authorize_GetUserPLevel_Handler,
		},
		{
			MethodName: "GetAdminList",
			Handler:    _Authorize_GetAdminList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/auth.proto",
}
