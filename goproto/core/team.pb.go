// Code generated by protoc-gen-go. DO NOT EDIT.
// source: core/team.proto

// protoc -I proto --go_out=plugins=grpc,paths=source_relative:./goproto ./proto/core/team.proto

package core

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("core/team.proto", fileDescriptor_a9639622b22f386d) }

var fileDescriptor_a9639622b22f386d = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0xce, 0x2f, 0x4a,
	0xd5, 0x2f, 0x49, 0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0x09, 0x48,
	0x09, 0xc1, 0x85, 0x53, 0x52, 0xd3, 0x20, 0x32, 0x46, 0xaf, 0x19, 0xb9, 0x58, 0x42, 0x52, 0x13,
	0x73, 0x85, 0xac, 0xb8, 0xd8, 0x9c, 0x8b, 0x52, 0x13, 0x4b, 0x52, 0x85, 0xc4, 0xf5, 0x40, 0xea,
	0xf4, 0x20, 0x3c, 0x90, 0x5c, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x94, 0x28, 0xa6, 0x44,
	0x41, 0x4e, 0xa5, 0x12, 0x83, 0x90, 0x09, 0x17, 0x8b, 0x57, 0x7e, 0x66, 0x9e, 0x10, 0x54, 0x01,
	0x88, 0x8d, 0xac, 0x4f, 0x18, 0x5d, 0x18, 0xa2, 0xcb, 0x9c, 0x8b, 0xd5, 0x27, 0x35, 0xb1, 0x2c,
	0x55, 0x48, 0x0c, 0x22, 0x0f, 0xe6, 0x20, 0xeb, 0x13, 0xc1, 0x10, 0x87, 0x68, 0xb4, 0xe0, 0x62,
	0xf1, 0xce, 0x4c, 0xce, 0x86, 0x39, 0x14, 0xc4, 0xf6, 0x4d, 0xcd, 0x4d, 0x4a, 0x2d, 0x42, 0x73,
	0x28, 0xb2, 0x04, 0x58, 0xa7, 0x93, 0x69, 0x94, 0x71, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e,
	0x72, 0x7e, 0xae, 0x7e, 0x7a, 0x6a, 0x5e, 0x6a, 0x51, 0x62, 0x4e, 0x55, 0x7a, 0x8a, 0x7e, 0x6e,
	0x66, 0x72, 0x51, 0xbe, 0x2e, 0x38, 0x48, 0xf4, 0xd3, 0xf3, 0x21, 0x34, 0xc8, 0x0c, 0x6b, 0x10,
	0x91, 0xc4, 0x06, 0x16, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x86, 0xa0, 0x7b, 0x58,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TeamClient is the client API for Team service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TeamClient interface {
	// 创建队伍
	Create(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamReply, error)
	// 加入队伍
	Join(ctx context.Context, in *JoinTeamRequest, opts ...grpc.CallOption) (*JoinTeamReply, error)
	// 离开队伍
	Leave(ctx context.Context, in *LeaveTeamRequest, opts ...grpc.CallOption) (*LeaveTeamReply, error)
	// 踢人
	Kick(ctx context.Context, in *KickMemberRequest, opts ...grpc.CallOption) (*KickMemberReply, error)
}

type teamClient struct {
	cc *grpc.ClientConn
}

func NewTeamClient(cc *grpc.ClientConn) TeamClient {
	return &teamClient{cc}
}

func (c *teamClient) Create(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamReply, error) {
	out := new(CreateTeamReply)
	err := c.cc.Invoke(ctx, "/core.Team/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) Join(ctx context.Context, in *JoinTeamRequest, opts ...grpc.CallOption) (*JoinTeamReply, error) {
	out := new(JoinTeamReply)
	err := c.cc.Invoke(ctx, "/core.Team/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) Leave(ctx context.Context, in *LeaveTeamRequest, opts ...grpc.CallOption) (*LeaveTeamReply, error) {
	out := new(LeaveTeamReply)
	err := c.cc.Invoke(ctx, "/core.Team/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) Kick(ctx context.Context, in *KickMemberRequest, opts ...grpc.CallOption) (*KickMemberReply, error) {
	out := new(KickMemberReply)
	err := c.cc.Invoke(ctx, "/core.Team/Kick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamServer is the server API for Team service.
type TeamServer interface {
	// 创建队伍
	Create(context.Context, *CreateTeamRequest) (*CreateTeamReply, error)
	// 加入队伍
	Join(context.Context, *JoinTeamRequest) (*JoinTeamReply, error)
	// 离开队伍
	Leave(context.Context, *LeaveTeamRequest) (*LeaveTeamReply, error)
	// 踢人
	Kick(context.Context, *KickMemberRequest) (*KickMemberReply, error)
}

// UnimplementedTeamServer can be embedded to have forward compatible implementations.
type UnimplementedTeamServer struct {
}

func (*UnimplementedTeamServer) Create(ctx context.Context, req *CreateTeamRequest) (*CreateTeamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedTeamServer) Join(ctx context.Context, req *JoinTeamRequest) (*JoinTeamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (*UnimplementedTeamServer) Leave(ctx context.Context, req *LeaveTeamRequest) (*LeaveTeamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (*UnimplementedTeamServer) Kick(ctx context.Context, req *KickMemberRequest) (*KickMemberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kick not implemented")
}

func RegisterTeamServer(s *grpc.Server, srv TeamServer) {
	s.RegisterService(&_Team_serviceDesc, srv)
}

func _Team_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Team/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).Create(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Team/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).Join(ctx, req.(*JoinTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Team/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).Leave(ctx, req.(*LeaveTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_Kick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).Kick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Team/Kick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).Kick(ctx, req.(*KickMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Team_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.Team",
	HandlerType: (*TeamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Team_Create_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Team_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Team_Leave_Handler,
		},
		{
			MethodName: "Kick",
			Handler:    _Team_Kick_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/team.proto",
}
