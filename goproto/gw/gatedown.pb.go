// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gw/gatedown.proto

// protoc -I proto --go_out=plugins=grpc,paths=source_relative:./goproto ./proto/gw/gatedown.proto

package gw

import (
	context "context"
	fmt "fmt"
	comm "github.com/generalzgd/micro-proto/goproto/comm"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("gw/gatedown.proto", fileDescriptor_c72521daa853f599) }

var fileDescriptor_c72521daa853f599 = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0x3d, 0x4b, 0x04, 0x31,
	0x10, 0x86, 0x4f, 0x8b, 0x3b, 0x88, 0xc8, 0xb1, 0xc1, 0x6a, 0xcb, 0xab, 0x35, 0x83, 0x5a, 0xda,
	0xf9, 0x81, 0x82, 0x1f, 0x07, 0xd7, 0x08, 0x76, 0xb9, 0xdd, 0xd9, 0x31, 0x78, 0xc9, 0xac, 0xd9,
	0x84, 0xb0, 0xfe, 0x18, 0x7f, 0xab, 0x64, 0xb3, 0xad, 0xcd, 0x3b, 0xbc, 0x0f, 0xef, 0x53, 0x8c,
	0xa8, 0x28, 0x01, 0xe9, 0x80, 0x2d, 0x27, 0xa7, 0x7a, 0xcf, 0x81, 0xe5, 0x31, 0xa5, 0x5a, 0xc6,
	0x01, 0x3d, 0xe4, 0x68, 0xb1, 0x2b, 0xbc, 0xae, 0x1a, 0xb6, 0x16, 0x72, 0xf0, 0x3c, 0xbd, 0xfa,
	0x3d, 0x12, 0xa7, 0x4f, 0xdd, 0xa3, 0x0e, 0xf8, 0xae, 0xc7, 0x7b, 0x4e, 0x4e, 0x9e, 0x8b, 0xe5,
	0x1b, 0x07, 0xd3, 0x8d, 0x72, 0xad, 0xb2, 0xae, 0x5e, 0x07, 0x2a, 0xa0, 0x5e, 0xab, 0xec, 0xaa,
	0x3b, 0xb6, 0x76, 0x87, 0xfd, 0x61, 0xdc, 0x2c, 0x24, 0x88, 0xd5, 0xd6, 0xbd, 0x30, 0x19, 0x27,
	0xab, 0x32, 0x9f, 0xca, 0xff, 0x82, 0x12, 0xab, 0x67, 0xd3, 0x7c, 0x6d, 0x63, 0x90, 0x67, 0x45,
	0x98, 0xeb, 0x0e, 0xbf, 0x23, 0x0e, 0xa1, 0x3e, 0x29, 0xce, 0x83, 0xf7, 0xec, 0x37, 0x8b, 0xdb,
	0xcb, 0x0f, 0x20, 0x13, 0x3e, 0xe3, 0x3e, 0x63, 0x20, 0x74, 0xe8, 0xf5, 0xe1, 0x87, 0x5a, 0xb0,
	0xa6, 0xf1, 0x7c, 0x31, 0x7d, 0x01, 0xc4, 0xf3, 0x4d, 0x37, 0x94, 0xf6, 0xcb, 0xa9, 0x5c, 0xff,
	0x05, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x03, 0x06, 0xbb, 0x1a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HfGateWayDownClient is the client API for HfGateWayDown service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HfGateWayDownClient interface {
	// 广播通知
	Notify(ctx context.Context, in *MsgNotify, opts ...grpc.CallOption) (*comm.CommReply, error)
	// 用户登录通知给所有网关
	OnLogin(ctx context.Context, in *LoginNotify, opts ...grpc.CallOption) (*comm.CommReply, error)
	// 登录验证，互踢判断需要
	KickOut(ctx context.Context, in *KickOutRequest, opts ...grpc.CallOption) (*comm.Error, error)
}

type hfGateWayDownClient struct {
	cc *grpc.ClientConn
}

func NewHfGateWayDownClient(cc *grpc.ClientConn) HfGateWayDownClient {
	return &hfGateWayDownClient{cc}
}

func (c *hfGateWayDownClient) Notify(ctx context.Context, in *MsgNotify, opts ...grpc.CallOption) (*comm.CommReply, error) {
	out := new(comm.CommReply)
	err := c.cc.Invoke(ctx, "/gw.HfGateWayDown/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hfGateWayDownClient) OnLogin(ctx context.Context, in *LoginNotify, opts ...grpc.CallOption) (*comm.CommReply, error) {
	out := new(comm.CommReply)
	err := c.cc.Invoke(ctx, "/gw.HfGateWayDown/OnLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hfGateWayDownClient) KickOut(ctx context.Context, in *KickOutRequest, opts ...grpc.CallOption) (*comm.Error, error) {
	out := new(comm.Error)
	err := c.cc.Invoke(ctx, "/gw.HfGateWayDown/KickOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HfGateWayDownServer is the server API for HfGateWayDown service.
type HfGateWayDownServer interface {
	// 广播通知
	Notify(context.Context, *MsgNotify) (*comm.CommReply, error)
	// 用户登录通知给所有网关
	OnLogin(context.Context, *LoginNotify) (*comm.CommReply, error)
	// 登录验证，互踢判断需要
	KickOut(context.Context, *KickOutRequest) (*comm.Error, error)
}

// UnimplementedHfGateWayDownServer can be embedded to have forward compatible implementations.
type UnimplementedHfGateWayDownServer struct {
}

func (*UnimplementedHfGateWayDownServer) Notify(ctx context.Context, req *MsgNotify) (*comm.CommReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (*UnimplementedHfGateWayDownServer) OnLogin(ctx context.Context, req *LoginNotify) (*comm.CommReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnLogin not implemented")
}
func (*UnimplementedHfGateWayDownServer) KickOut(ctx context.Context, req *KickOutRequest) (*comm.Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickOut not implemented")
}

func RegisterHfGateWayDownServer(s *grpc.Server, srv HfGateWayDownServer) {
	s.RegisterService(&_HfGateWayDown_serviceDesc, srv)
}

func _HfGateWayDown_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HfGateWayDownServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.HfGateWayDown/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HfGateWayDownServer).Notify(ctx, req.(*MsgNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _HfGateWayDown_OnLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HfGateWayDownServer).OnLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.HfGateWayDown/OnLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HfGateWayDownServer).OnLogin(ctx, req.(*LoginNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _HfGateWayDown_KickOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HfGateWayDownServer).KickOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.HfGateWayDown/KickOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HfGateWayDownServer).KickOut(ctx, req.(*KickOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HfGateWayDown_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gw.HfGateWayDown",
	HandlerType: (*HfGateWayDownServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _HfGateWayDown_Notify_Handler,
		},
		{
			MethodName: "OnLogin",
			Handler:    _HfGateWayDown_OnLogin_Handler,
		},
		{
			MethodName: "KickOut",
			Handler:    _HfGateWayDown_KickOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gw/gatedown.proto",
}
