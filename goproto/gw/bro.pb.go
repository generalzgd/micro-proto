// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gw/bro.proto

// protoc -I proto --go_out=plugins=grpc,paths=source_relative:./goproto ./protofgw/bro.proto

package gw

import (
	context "context"
	fmt "fmt"
	comm "github.com/generalzgd/micro-proto/goproto/comm"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("gw/bro.proto", fileDescriptor_d3b8da1729ba11f1) }

var fileDescriptor_d3b8da1729ba11f1 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8e, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0x57, 0xc1, 0x5d, 0x88, 0xc2, 0xb2, 0xc1, 0x53, 0x8e, 0x7b, 0xd6, 0x0c, 0xea, 0xd1,
	0xdb, 0x8a, 0x20, 0xf8, 0x67, 0xa1, 0x47, 0x6f, 0xb6, 0x4d, 0xc7, 0x60, 0x93, 0xa9, 0xd3, 0x84,
	0x50, 0x3f, 0x88, 0x9f, 0x57, 0xd2, 0xf4, 0xea, 0xe5, 0x85, 0xf7, 0xe3, 0xfd, 0xc2, 0x88, 0x0b,
	0x4c, 0x50, 0x33, 0xe9, 0x81, 0x29, 0x90, 0x3c, 0xc5, 0xa4, 0x76, 0x0d, 0x39, 0x07, 0x39, 0xc8,
	0x17, 0xac, 0x64, 0x1c, 0x0d, 0x43, 0x8e, 0xd6, 0x74, 0x85, 0xdd, 0xfe, 0x9e, 0x88, 0xb3, 0xa7,
	0xee, 0xc0, 0x24, 0xaf, 0xc4, 0xfa, 0x8d, 0x82, 0xed, 0x26, 0xb9, 0xd5, 0x79, 0xa3, 0x5f, 0x47,
	0x2c, 0x40, 0x6d, 0x75, 0xfe, 0x47, 0x3f, 0x90, 0x73, 0x95, 0x19, 0xfa, 0x69, 0xbf, 0x92, 0x20,
	0x36, 0x47, 0xff, 0x42, 0x68, 0xbd, 0xdc, 0x95, 0xf9, 0x5c, 0xfe, 0x17, 0xb4, 0xd8, 0x3c, 0xdb,
	0xe6, 0xeb, 0x18, 0x83, 0xbc, 0x2c, 0xc2, 0x52, 0x2b, 0xf3, 0x1d, 0xcd, 0x18, 0xd4, 0x79, 0x71,
	0x1e, 0x99, 0x89, 0xf7, 0xab, 0xc3, 0xcd, 0x3b, 0xa0, 0x0d, 0x9f, 0xb1, 0xce, 0x18, 0xd0, 0x78,
	0xc3, 0x1f, 0xfd, 0x0f, 0xb6, 0xe0, 0x6c, 0xc3, 0x74, 0x3d, 0x5f, 0x0f, 0x48, 0xcb, 0x9b, 0xee,
	0x31, 0xd5, 0xeb, 0xb9, 0xdc, 0xfd, 0x05, 0x00, 0x00, 0xff, 0xff, 0x73, 0x40, 0x26, 0x15, 0x0d,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HfBroClient is the client API for HfBro service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HfBroClient interface {
	// 直接发给用户的协议
	Notify(ctx context.Context, in *MsgNotify, opts ...grpc.CallOption) (*comm.CommReply, error)
	// 用户登录通知给所有网关
	OnLogin(ctx context.Context, in *LoginNotify, opts ...grpc.CallOption) (*comm.CommReply, error)
	// 用户退出通知给所有网关
	KickOut(ctx context.Context, in *KickOutRequest, opts ...grpc.CallOption) (*comm.Error, error)
}

type hfBroClient struct {
	cc *grpc.ClientConn
}

func NewHfBroClient(cc *grpc.ClientConn) HfBroClient {
	return &hfBroClient{cc}
}

func (c *hfBroClient) Notify(ctx context.Context, in *MsgNotify, opts ...grpc.CallOption) (*comm.CommReply, error) {
	out := new(comm.CommReply)
	err := c.cc.Invoke(ctx, "/gw.HfBro/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hfBroClient) OnLogin(ctx context.Context, in *LoginNotify, opts ...grpc.CallOption) (*comm.CommReply, error) {
	out := new(comm.CommReply)
	err := c.cc.Invoke(ctx, "/gw.HfBro/OnLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hfBroClient) KickOut(ctx context.Context, in *KickOutRequest, opts ...grpc.CallOption) (*comm.Error, error) {
	out := new(comm.Error)
	err := c.cc.Invoke(ctx, "/gw.HfBro/KickOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HfBroServer is the server API for HfBro service.
type HfBroServer interface {
	// 直接发给用户的协议
	Notify(context.Context, *MsgNotify) (*comm.CommReply, error)
	// 用户登录通知给所有网关
	OnLogin(context.Context, *LoginNotify) (*comm.CommReply, error)
	// 用户退出通知给所有网关
	KickOut(context.Context, *KickOutRequest) (*comm.Error, error)
}

// UnimplementedHfBroServer can be embedded to have forward compatible implementations.
type UnimplementedHfBroServer struct {
}

func (*UnimplementedHfBroServer) Notify(ctx context.Context, req *MsgNotify) (*comm.CommReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (*UnimplementedHfBroServer) OnLogin(ctx context.Context, req *LoginNotify) (*comm.CommReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnLogin not implemented")
}
func (*UnimplementedHfBroServer) KickOut(ctx context.Context, req *KickOutRequest) (*comm.Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickOut not implemented")
}

func RegisterHfBroServer(s *grpc.Server, srv HfBroServer) {
	s.RegisterService(&_HfBro_serviceDesc, srv)
}

func _HfBro_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HfBroServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.HfBro/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HfBroServer).Notify(ctx, req.(*MsgNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _HfBro_OnLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HfBroServer).OnLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.HfBro/OnLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HfBroServer).OnLogin(ctx, req.(*LoginNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _HfBro_KickOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HfBroServer).KickOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.HfBro/KickOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HfBroServer).KickOut(ctx, req.(*KickOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HfBro_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gw.HfBro",
	HandlerType: (*HfBroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _HfBro_Notify_Handler,
		},
		{
			MethodName: "OnLogin",
			Handler:    _HfBro_OnLogin_Handler,
		},
		{
			MethodName: "KickOut",
			Handler:    _HfBro_KickOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gw/bro.proto",
}
