// Code generated by protoc-gen-grpc-gateway. DO NOT EDIT.
// source: gw/gateway.proto

/*
Package gw is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package gw

import (
	"context"
	"errors"
	"io"
	"net/http"
	"time"

	"github.com/golang/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/utilities"
	grpcpool "github.com/processout/grpc-go-pool"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	"github.com/generalzgd/micro-proto/goproto/auth"
)

var _ codes.Code
var _ io.Reader
var _ status.Status
var _ = runtime.String
var _ = utilities.NewDoubleArray

func request_HfGateway_Authorize_Login_0(ctx context.Context, marshaler runtime.Marshaler, client auth.AuthorizeClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq LoginRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.Login(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func request_HfGateway_Authorize_Logout_0(ctx context.Context, marshaler runtime.Marshaler, client auth.AuthorizeClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq LogoutRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.Logout(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func request_HfGateway_Authorize_GetUserInfo_0(ctx context.Context, marshaler runtime.Marshaler, client auth.AuthorizeClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetUserInfoRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetUserInfo(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

// type HttpPrehandler func(string, *http.Request) (int, bool)
// type HttpDoneHandler func(string, proto.Message, http.ResponseWriter, *http.Request)
// type QpsHandler func(time.Duration)

// RegisterHfGatewayHandlerClient registers the http handlers for service HfGateway
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "HfGatewayClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "HfGatewayClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "{@target}Client" to call the correct interceptors.
// @param getEndpoint: a callback func( 'package.Service/Method' ) 'endpoint address'
// @param endCallback: a callback when grpc end, then callback('package.Service/Method' string, reply proto.Message) bool[false:quit]
// @param getClientConn: a callback func( 'package.Service/Method' )(conn, error) to get long connection by method
func RegisterHfGatewayHandlerClient(
	ctx context.Context,
	mux *runtime.ServeMux,
	opts []grpc.DialOption,
	getEndpoint func(string) string,
	getClientConn func(string) (*grpcpool.ClientConn, error),
	beginHandler func(string, *http.Request) (int, bool),
	doneHandler func(string, proto.Message, http.ResponseWriter, *http.Request),
	qpsHandler func(time.Duration)) error {

	makeConn := func(meth string) (*grpc.ClientConn, error, func()) {
		if getClientConn != nil {
			conn, err := getClientConn(meth)
			if err != nil {
				return nil, err, func() {}
			}
			return conn.ClientConn, nil, func() { conn.Close() }
		}
		addr := getEndpoint(meth)
		conn, err := grpc.Dial(addr, opts...)
		return conn, err, func() { conn.Close() }
	}

	// 注册Authorize/Login传输方法入口
	// 登录校验用户
	// @tarpkg auth 所在目录,对应@import的某行
	mux.Handle("POST", pattern_HfGateway_Authorize_Login_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		begin := time.Now()
		defer qpsHandler(time.Since(begin))
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)

		meth := "gw.Authorize/Login"
		if code, ok := beginHandler(meth, req); code == http.StatusAccepted {
			if !ok {
				runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, errors.New("not login yet"))
				return
			}
		} else {
			runtime.OtherErrorHandler(w, req, http.StatusText(code), code)
			return
		}

		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		conn, err, closeFunc := makeConn(meth)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		defer closeFunc()

		client := auth.NewAuthorizeClient(conn)

		resp, md, err := request_HfGateway_Authorize_Login_0(rctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		doneHandler(meth, resp, w, req)

		forward_HfGateway_Authorize_Login_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	// 注册Authorize/Logout传输方法入口
	// 登出
	// @tarpkg auth 所在目录
	mux.Handle("POST", pattern_HfGateway_Authorize_Logout_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		begin := time.Now()
		defer qpsHandler(time.Since(begin))
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)

		meth := "gw.Authorize/Logout"
		if code, ok := beginHandler(meth, req); code == http.StatusAccepted {
			if !ok {
				runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, errors.New("not login yet"))
				return
			}
		} else {
			runtime.OtherErrorHandler(w, req, http.StatusText(code), code)
			return
		}

		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		conn, err, closeFunc := makeConn(meth)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		defer closeFunc()

		client := auth.NewAuthorizeClient(conn)

		resp, md, err := request_HfGateway_Authorize_Logout_0(rctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		doneHandler(meth, resp, w, req)

		forward_HfGateway_Authorize_Logout_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	// 注册Authorize/GetUserInfo传输方法入口
	// 获得用户信息
	// @tarpkg auth 所在目录
	mux.Handle("POST", pattern_HfGateway_Authorize_GetUserInfo_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		begin := time.Now()
		defer qpsHandler(time.Since(begin))
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)

		meth := "gw.Authorize/GetUserInfo"
		if code, ok := beginHandler(meth, req); code == http.StatusAccepted {
			if !ok {
				runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, errors.New("not login yet"))
				return
			}
		} else {
			runtime.OtherErrorHandler(w, req, http.StatusText(code), code)
			return
		}

		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		conn, err, closeFunc := makeConn(meth)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		defer closeFunc()

		client := auth.NewAuthorizeClient(conn)

		resp, md, err := request_HfGateway_Authorize_GetUserInfo_0(rctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		doneHandler(meth, resp, w, req)

		forward_HfGateway_Authorize_GetUserInfo_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_HfGateway_Authorize_Login_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2}, []string{"v1", "gateway", "login"}, "", runtime.AssumeColonVerbOpt(true)))

	pattern_HfGateway_Authorize_Logout_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2}, []string{"v1", "gateway", "logout"}, "", runtime.AssumeColonVerbOpt(true)))

	pattern_HfGateway_Authorize_GetUserInfo_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2}, []string{"v1", "gateway", "getuserinfo"}, "", runtime.AssumeColonVerbOpt(true)))
)

var (
	forward_HfGateway_Authorize_Login_0 = runtime.ForwardResponseMessage

	forward_HfGateway_Authorize_Logout_0 = runtime.ForwardResponseMessage

	forward_HfGateway_Authorize_GetUserInfo_0 = runtime.ForwardResponseMessage
)
