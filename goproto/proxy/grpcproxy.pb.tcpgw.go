// Code generated by protoc-gen-grpc-tcpway. DO NOT EDIT.
// source: proxy/grpcproxy.proto

/*
Package proxy is a tcp/ws proxy.

It translates protobuf/Json packet into gRPC APIs.
*/
package proxy

import (
	"context"
	"encoding/json"
	"errors"
	"strings"
	"time"

	"github.com/generalzgd/comm-libs"
	"github.com/golang/protobuf/proto"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// define func

type registerHandler func(args *TransmitArgs) (err error)

type TransmitArgs struct {
	Method       string
	Endpoint     string
	Conn         *grpc.ClientConn
	MD           metadata.MD
	Data         []byte
	Codec        uint16
	Opts         []grpc.DialOption
	DoneCallback func(proto.Message)
	ctx          context.Context
}

var (
	// definePrefix =
	// tag @id to package.TargetService/Method map
	id2meth = map[uint16]string{}

	meth2id = map[string]uint16{}

	id2struct = map[uint16]func() proto.Message{}

	structName2id = map[string]uint16{}

	serviceMap = map[string]registerHandler{}
)

func init() {
	// id2meth

	// meth2id
	for k, v := range id2meth {
		meth2id[v] = k
	}
	// id2struct
	id2struct[6172] = func() proto.Message { return &imdef.ImError{} } // todo 这行为工具写死的代码,应该改成模板
	id2struct[8197] = func() proto.Message { return &comm.HfError{} }

	// structName2id
	structName2id["ImError"] = 6172 // todo 这行为工具写死的代码,应该改成模板
	structName2id["HfError"] = 8197

	// todo something handler

}

func decodeBytes(data []byte, codec uint16, inst proto.Message) error {
	if codec == 0 {
		return proto.Unmarshal(data, inst)
	} else if codec == 1 {
		return json.Unmarshal(data, inst)
	}
	return errors.New("codec type error")
}

func encodeBytes(codec uint16, inst proto.Message) ([]byte, error) {
	if codec == 0 {
		return proto.Marshal(inst)
	} else if codec == 1 {
		return json.Marshal(inst)
	}
	return nil, errors.New("codec type error")
}

// get meth(package.TargetService/Method) by id(cmdid)
func GetMethById(id uint16) string {
	return id2meth[id]
}

func GetIdByMeth(meth string) uint16 {
	return meth2id[meth]
}

// 根据@id/@upid/@downid标签获取对应方法的请求参数对象
func GetMsgObjById(id uint16) (proto.Message, bool) {
	if f, ok := id2struct[id]; ok {
		return f(), true
	}
	return nil, false
}

func GetIdByMsgObj(obj proto.Message) uint16 {
	name := comm_libs.GetStructName(obj)
	return structName2id[name]
}

func ParseMethod(method string) (string, string, string, error) {
	method = strings.Trim(method, "/")
	dotIdx := strings.Index(method, ".")
	slashIdx := strings.Index(method, "/")
	if dotIdx < 1 || slashIdx < 1 || dotIdx > slashIdx {
		return "", "", "", errors.New("method must be type of 'package.ServiceName/Method'")
	}
	packageName := method[:dotIdx]
	serviceName := strings.Trim(method[dotIdx:slashIdx], ".")
	methodName := strings.Trim(method[slashIdx:], "/")
	return packageName, serviceName, methodName, nil
}

// define call enter point
func RegisterTransmitor(args *TransmitArgs) error {
	if len(args.Method) < 1 || len(args.Endpoint) < 1 || len(args.MD) < 1 || args.DoneCallback == nil {
		return errors.New("transmit args empty")
	}

	packageName, serviceName, _, err := ParseMethod(args.Method)
	if err != nil {
		return err
	}
	packageService := packageName + "." + serviceName
	if handler, ok := serviceMap[packageService]; ok {
		err := handler(args)
		return err
	}
	return errors.New("method not register yet")
}

// registor single service enter point
